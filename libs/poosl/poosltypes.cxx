// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "poosltypes.hxx"

namespace poosl
{
  // T_message_type
  // 

  T_message_type::
  T_message_type ()
  : ::xml_schema::String ()
  {
  }

  T_message_type::
  T_message_type (Value v)
  : ::xml_schema::String (_xsd_T_message_type_literals_[v])
  {
  }

  T_message_type::
  T_message_type (const char* v)
  : ::xml_schema::String (v)
  {
  }

  T_message_type::
  T_message_type (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  T_message_type::
  T_message_type (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  T_message_type::
  T_message_type (const T_message_type& v,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  T_message_type& T_message_type::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_T_message_type_literals_[v]);

    return *this;
  }


  // T_boolean
  // 

  T_boolean::
  T_boolean ()
  : ::xml_schema::String ()
  {
  }

  T_boolean::
  T_boolean (Value v)
  : ::xml_schema::String (_xsd_T_boolean_literals_[v])
  {
  }

  T_boolean::
  T_boolean (const char* v)
  : ::xml_schema::String (v)
  {
  }

  T_boolean::
  T_boolean (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  T_boolean::
  T_boolean (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  T_boolean::
  T_boolean (const T_boolean& v,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  T_boolean& T_boolean::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_T_boolean_literals_[v]);

    return *this;
  }


  // T_typed_variable
  // 

  const T_typed_variable::NameType& T_typed_variable::
  getName () const
  {
    return this->name_.get ();
  }

  T_typed_variable::NameType& T_typed_variable::
  getName ()
  {
    return this->name_.get ();
  }

  void T_typed_variable::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void T_typed_variable::
  setName (::std::unique_ptr< NameType > x)
  {
    this->name_.set (std::move (x));
  }

  const T_typed_variable::TypeType& T_typed_variable::
  getType () const
  {
    return this->type_.get ();
  }

  T_typed_variable::TypeType& T_typed_variable::
  getType ()
  {
    return this->type_.get ();
  }

  void T_typed_variable::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_typed_variable::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }


  // T_poosl_type_attribute
  // 

  const T_poosl_type_attribute::TypeType& T_poosl_type_attribute::
  getType () const
  {
    return this->type_.get ();
  }

  T_poosl_type_attribute::TypeType& T_poosl_type_attribute::
  getType ()
  {
    return this->type_.get ();
  }

  void T_poosl_type_attribute::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_poosl_type_attribute::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }


  // T_identifier
  // 


  // T_class_name
  // 


  // T_poosl_type
  // 


  // T_port_name
  // 


  // T_variable_name
  // 


  // T_message_name
  // 


  // T_method_name
  // 


  // T_data_method_name
  //

  T_data_method_name::
  T_data_method_name ()
  : ::xml_schema::String ()
  {
  }

  T_data_method_name::
  T_data_method_name (const char* s)
  : ::xml_schema::String (s)
  {
  }

  T_data_method_name::
  T_data_method_name (const ::std::string& s)
  : ::xml_schema::String (s)
  {
  }

  T_data_method_name::
  T_data_method_name (const T_data_method_name& o,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::String (o, f, c)
  {
  }

  // T_operator
  // 


  // T_empty
  // 

  const T_empty::Stmt_handleOptional& T_empty::
  getStmt_handle () const
  {
    return this->stmt_handle_;
  }

  T_empty::Stmt_handleOptional& T_empty::
  getStmt_handle ()
  {
    return this->stmt_handle_;
  }

  void T_empty::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }

  void T_empty::
  setStmt_handle (const Stmt_handleOptional& x)
  {
    this->stmt_handle_ = x;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace poosl
{
  // T_message_type
  //

  T_message_type::
  T_message_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_T_message_type_convert ();
  }

  T_message_type::
  T_message_type (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_T_message_type_convert ();
  }

  T_message_type::
  T_message_type (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_T_message_type_convert ();
  }

  T_message_type* T_message_type::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_message_type (*this, f, c);
  }

  T_message_type::Value T_message_type::
  _xsd_T_message_type_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_T_message_type_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_T_message_type_indexes_,
                      _xsd_T_message_type_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_T_message_type_indexes_ + 2 || _xsd_T_message_type_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const T_message_type::
  _xsd_T_message_type_literals_[2] =
  {
    "read",
    "write"
  };

  const T_message_type::Value T_message_type::
  _xsd_T_message_type_indexes_[2] =
  {
    ::poosl::T_message_type::read,
    ::poosl::T_message_type::write
  };

  // T_boolean
  //

  T_boolean::
  T_boolean (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_T_boolean_convert ();
  }

  T_boolean::
  T_boolean (const ::xercesc::DOMAttr& a,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_T_boolean_convert ();
  }

  T_boolean::
  T_boolean (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_T_boolean_convert ();
  }

  T_boolean* T_boolean::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_boolean (*this, f, c);
  }

  T_boolean::Value T_boolean::
  _xsd_T_boolean_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_T_boolean_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_T_boolean_indexes_,
                      _xsd_T_boolean_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_T_boolean_indexes_ + 2 || _xsd_T_boolean_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const T_boolean::
  _xsd_T_boolean_literals_[2] =
  {
    "true",
    "false"
  };

  const T_boolean::Value T_boolean::
  _xsd_T_boolean_indexes_[2] =
  {
    ::poosl::T_boolean::false_,
    ::poosl::T_boolean::true_
  };

  // T_typed_variable
  //

  T_typed_variable::
  T_typed_variable ()
  : ::xml_schema::Type (),
    name_ (this),
    type_ (this)
  {
  }

  T_typed_variable::
  T_typed_variable (const NameType& name,
                    const TypeType& type)
  : ::xml_schema::Type (),
    name_ (name, this),
    type_ (type, this)
  {
  }

  T_typed_variable::
  T_typed_variable (const T_typed_variable& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    type_ (x.type_, f, this)
  {
  }

  T_typed_variable::
  T_typed_variable (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (this),
    type_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_typed_variable::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        this->name_.set (NameTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        this->type_.set (TypeTraits::create (i, f, this));
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }
  }

  T_typed_variable* T_typed_variable::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_typed_variable (*this, f, c);
  }

  T_typed_variable& T_typed_variable::
  operator= (const T_typed_variable& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->name_ = x.name_;
      this->type_ = x.type_;
    }

    return *this;
  }

  T_typed_variable::
  ~T_typed_variable ()
  {
  }

  // T_poosl_type_attribute
  //

  T_poosl_type_attribute::
  T_poosl_type_attribute ()
  : ::xml_schema::Type (),
    type_ (this)
  {
  }

  T_poosl_type_attribute::
  T_poosl_type_attribute (const TypeType& type)
  : ::xml_schema::Type (),
    type_ (type, this)
  {
  }

  T_poosl_type_attribute::
  T_poosl_type_attribute (const T_poosl_type_attribute& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    type_ (x.type_, f, this)
  {
  }

  T_poosl_type_attribute::
  T_poosl_type_attribute (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    type_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_poosl_type_attribute::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        this->type_.set (TypeTraits::create (i, f, this));
        continue;
      }
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }
  }

  T_poosl_type_attribute* T_poosl_type_attribute::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_poosl_type_attribute (*this, f, c);
  }

  T_poosl_type_attribute& T_poosl_type_attribute::
  operator= (const T_poosl_type_attribute& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->type_ = x.type_;
    }

    return *this;
  }

  T_poosl_type_attribute::
  ~T_poosl_type_attribute ()
  {
  }

  // T_identifier
  //

  T_identifier::
  T_identifier ()
  : ::xml_schema::String ()
  {
  }

  T_identifier::
  T_identifier (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_identifier::
  T_identifier (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_identifier::
  T_identifier (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_identifier::
  T_identifier (const T_identifier& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c)
  {
  }

  T_identifier::
  T_identifier (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
  }

  T_identifier::
  T_identifier (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
  }

  T_identifier::
  T_identifier (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
  }

  T_identifier* T_identifier::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_identifier (*this, f, c);
  }

  T_identifier::
  ~T_identifier ()
  {
  }

  // T_class_name
  //

  T_class_name::
  T_class_name ()
  : ::poosl::T_identifier ()
  {
  }

  T_class_name::
  T_class_name (const char* _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_class_name::
  T_class_name (const ::std::string& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_class_name::
  T_class_name (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_class_name::
  T_class_name (const T_class_name& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_identifier (x, f, c)
  {
  }

  T_class_name::
  T_class_name (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_identifier (e, f, c)
  {
  }

  T_class_name::
  T_class_name (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_identifier (a, f, c)
  {
  }

  T_class_name::
  T_class_name (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_identifier (s, e, f, c)
  {
  }

  T_class_name* T_class_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_class_name (*this, f, c);
  }

  T_class_name::
  ~T_class_name ()
  {
  }

  // T_poosl_type
  //

  T_poosl_type::
  T_poosl_type ()
  : ::poosl::T_class_name ()
  {
  }

  T_poosl_type::
  T_poosl_type (const char* _xsd_String_base)
  : ::poosl::T_class_name (_xsd_String_base)
  {
  }

  T_poosl_type::
  T_poosl_type (const ::std::string& _xsd_String_base)
  : ::poosl::T_class_name (_xsd_String_base)
  {
  }

  T_poosl_type::
  T_poosl_type (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_class_name (_xsd_String_base)
  {
  }

  T_poosl_type::
  T_poosl_type (const T_poosl_type& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_class_name (x, f, c)
  {
  }

  T_poosl_type::
  T_poosl_type (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_class_name (e, f, c)
  {
  }

  T_poosl_type::
  T_poosl_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_class_name (a, f, c)
  {
  }

  T_poosl_type::
  T_poosl_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::poosl::T_class_name (s, e, f, c)
  {
  }

  T_poosl_type* T_poosl_type::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_poosl_type (*this, f, c);
  }

  T_poosl_type::
  ~T_poosl_type ()
  {
  }

  // T_port_name
  //

  T_port_name::
  T_port_name ()
  : ::poosl::T_identifier ()
  {
  }

  T_port_name::
  T_port_name (const char* _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_port_name::
  T_port_name (const ::std::string& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_port_name::
  T_port_name (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_port_name::
  T_port_name (const T_port_name& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::poosl::T_identifier (x, f, c)
  {
  }

  T_port_name::
  T_port_name (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::poosl::T_identifier (e, f, c)
  {
  }

  T_port_name::
  T_port_name (const ::xercesc::DOMAttr& a,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::poosl::T_identifier (a, f, c)
  {
  }

  T_port_name::
  T_port_name (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::poosl::T_identifier (s, e, f, c)
  {
  }

  T_port_name* T_port_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_port_name (*this, f, c);
  }

  T_port_name::
  ~T_port_name ()
  {
  }

  // T_variable_name
  //

  T_variable_name::
  T_variable_name ()
  : ::poosl::T_identifier ()
  {
  }

  T_variable_name::
  T_variable_name (const char* _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_variable_name::
  T_variable_name (const ::std::string& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_variable_name::
  T_variable_name (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_variable_name::
  T_variable_name (const T_variable_name& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::poosl::T_identifier (x, f, c)
  {
  }

  T_variable_name::
  T_variable_name (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::poosl::T_identifier (e, f, c)
  {
  }

  T_variable_name::
  T_variable_name (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::poosl::T_identifier (a, f, c)
  {
  }

  T_variable_name::
  T_variable_name (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::poosl::T_identifier (s, e, f, c)
  {
  }

  T_variable_name* T_variable_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_variable_name (*this, f, c);
  }

  T_variable_name::
  ~T_variable_name ()
  {
  }

  // T_message_name
  //

  T_message_name::
  T_message_name ()
  : ::poosl::T_identifier ()
  {
  }

  T_message_name::
  T_message_name (const char* _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_message_name::
  T_message_name (const ::std::string& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_message_name::
  T_message_name (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_message_name::
  T_message_name (const T_message_name& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::poosl::T_identifier (x, f, c)
  {
  }

  T_message_name::
  T_message_name (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::poosl::T_identifier (e, f, c)
  {
  }

  T_message_name::
  T_message_name (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::poosl::T_identifier (a, f, c)
  {
  }

  T_message_name::
  T_message_name (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::poosl::T_identifier (s, e, f, c)
  {
  }

  T_message_name* T_message_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_message_name (*this, f, c);
  }

  T_message_name::
  ~T_message_name ()
  {
  }

  // T_method_name
  //

  T_method_name::
  T_method_name ()
  : ::poosl::T_identifier ()
  {
  }

  T_method_name::
  T_method_name (const char* _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_method_name::
  T_method_name (const ::std::string& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_method_name::
  T_method_name (const ::xml_schema::String& _xsd_String_base)
  : ::poosl::T_identifier (_xsd_String_base)
  {
  }

  T_method_name::
  T_method_name (const T_method_name& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::poosl::T_identifier (x, f, c)
  {
  }

  T_method_name::
  T_method_name (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::poosl::T_identifier (e, f, c)
  {
  }

  T_method_name::
  T_method_name (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::poosl::T_identifier (a, f, c)
  {
  }

  T_method_name::
  T_method_name (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::poosl::T_identifier (s, e, f, c)
  {
  }

  T_method_name* T_method_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_method_name (*this, f, c);
  }

  T_method_name::
  ~T_method_name ()
  {
  }

  // T_data_method_name
  //

  T_data_method_name::
  T_data_method_name (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
  }

  T_data_method_name::
  T_data_method_name (const ::xercesc::DOMAttr& a,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
  }

  T_data_method_name::
  T_data_method_name (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
  }

  T_data_method_name* T_data_method_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_data_method_name (*this, f, c);
  }

  // T_operator
  //

  T_operator::
  T_operator ()
  : ::xml_schema::String ()
  {
  }

  T_operator::
  T_operator (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_operator::
  T_operator (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_operator::
  T_operator (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  T_operator::
  T_operator (const T_operator& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c)
  {
  }

  T_operator::
  T_operator (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
  }

  T_operator::
  T_operator (const ::xercesc::DOMAttr& a,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
  }

  T_operator::
  T_operator (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
  }

  T_operator* T_operator::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_operator (*this, f, c);
  }

  T_operator::
  ~T_operator ()
  {
  }

  // T_empty
  //

  T_empty::
  T_empty ()
  : ::xml_schema::Type (),
    stmt_handle_ (this)
  {
  }

  T_empty::
  T_empty (const T_empty& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    stmt_handle_ (x.stmt_handle_, f, this)
  {
  }

  T_empty::
  T_empty (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    stmt_handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_empty::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "stmt_handle" && n.namespace_ ().empty ())
      {
        this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
        continue;
      }
    }
  }

  T_empty* T_empty::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_empty (*this, f, c);
  }

  T_empty& T_empty::
  operator= (const T_empty& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->stmt_handle_ = x.stmt_handle_;
    }

    return *this;
  }

  T_empty::
  ~T_empty ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace poosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, T_message_type::Value i)
  {
    return o << T_message_type::_xsd_T_message_type_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_message_type& i)
  {
    return o << static_cast< const ::xml_schema::String& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, T_boolean::Value i)
  {
    return o << T_boolean::_xsd_T_boolean_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_boolean& i)
  {
    return o << static_cast< const ::xml_schema::String& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_typed_variable& i)
  {
    o << ::std::endl << "name: " << i.getName ();
    o << ::std::endl << "type: " << i.getType ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_poosl_type_attribute& i)
  {
    o << ::std::endl << "type: " << i.getType ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_identifier& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_class_name& i)
  {
    o << static_cast< const ::poosl::T_identifier& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_poosl_type& i)
  {
    o << static_cast< const ::poosl::T_class_name& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_port_name& i)
  {
    o << static_cast< const ::poosl::T_identifier& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_variable_name& i)
  {
    o << static_cast< const ::poosl::T_identifier& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_message_name& i)
  {
    o << static_cast< const ::poosl::T_identifier& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_method_name& i)
  {
    o << static_cast< const ::poosl::T_identifier& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_data_method_name& i)
  {
    return o << static_cast< const ::xml_schema::String& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_operator& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_empty& i)
  {
    if (i.getStmt_handle ())
    {
      o << ::std::endl << "stmt_handle: " << *i.getStmt_handle ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace poosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace poosl
{
  void
  operator<< (::xercesc::DOMElement& e, const T_message_type& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_message_type& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_message_type& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_boolean& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_boolean& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_boolean& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_typed_variable& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.getName ();
    }

    // type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << i.getType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_poosl_type_attribute& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << i.getType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_identifier& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_identifier& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_identifier& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_class_name& i)
  {
    e << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_class_name& i)
  {
    a << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_class_name& i)
  {
    l << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_poosl_type& i)
  {
    e << static_cast< const ::poosl::T_class_name& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_poosl_type& i)
  {
    a << static_cast< const ::poosl::T_class_name& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_poosl_type& i)
  {
    l << static_cast< const ::poosl::T_class_name& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_port_name& i)
  {
    e << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_port_name& i)
  {
    a << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_port_name& i)
  {
    l << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_variable_name& i)
  {
    e << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_variable_name& i)
  {
    a << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_variable_name& i)
  {
    l << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_message_name& i)
  {
    e << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_message_name& i)
  {
    a << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_message_name& i)
  {
    l << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_method_name& i)
  {
    e << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_method_name& i)
  {
    a << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_method_name& i)
  {
    l << static_cast< const ::poosl::T_identifier& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_data_method_name& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_data_method_name& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_data_method_name& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_operator& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const T_operator& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const T_operator& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_empty& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // stmt_handle
    //
    if (i.getStmt_handle ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "stmt_handle",
          e));

      a << *i.getStmt_handle ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

