// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rotalumisrequest.hxx"

namespace poosl
{
  // T_load_request
  // 

  const T_load_request::FilenameType& T_load_request::
  getFilename () const
  {
    return this->filename_.get ();
  }

  T_load_request::FilenameType& T_load_request::
  getFilename ()
  {
    return this->filename_.get ();
  }

  void T_load_request::
  setFilename (const FilenameType& x)
  {
    this->filename_.set (x);
  }

  void T_load_request::
  setFilename (::std::unique_ptr< FilenameType > x)
  {
    this->filename_.set (std::move (x));
  }


  // T_save_request
  // 

  const T_save_request::FilenameType& T_save_request::
  getFilename () const
  {
    return this->filename_.get ();
  }

  T_save_request::FilenameType& T_save_request::
  getFilename ()
  {
    return this->filename_.get ();
  }

  void T_save_request::
  setFilename (const FilenameType& x)
  {
    this->filename_.set (x);
  }

  void T_save_request::
  setFilename (::std::unique_ptr< FilenameType > x)
  {
    this->filename_.set (std::move (x));
  }

  const T_save_request::StringType& T_save_request::
  getString () const
  {
    return this->string_.get ();
  }

  T_save_request::StringType& T_save_request::
  getString ()
  {
    return this->string_.get ();
  }

  void T_save_request::
  setString (const StringType& x)
  {
    this->string_.set (x);
  }

  void T_save_request::
  setString (::std::unique_ptr< StringType > x)
  {
    this->string_.set (std::move (x));
  }


  // T_serialize_request
  // 

  const T_serialize_request::HandleType& T_serialize_request::
  getHandle () const
  {
    return this->handle_.get ();
  }

  T_serialize_request::HandleType& T_serialize_request::
  getHandle ()
  {
    return this->handle_.get ();
  }

  void T_serialize_request::
  setHandle (const HandleType& x)
  {
    this->handle_.set (x);
  }


  // T_deserialize_request
  // 

  const T_deserialize_request::Poosl_specificationOptional& T_deserialize_request::
  getPoosl_specification () const
  {
    return this->poosl_specification_;
  }

  T_deserialize_request::Poosl_specificationOptional& T_deserialize_request::
  getPoosl_specification ()
  {
    return this->poosl_specification_;
  }

  void T_deserialize_request::
  setPoosl_specification (const Poosl_specificationType& x)
  {
    this->poosl_specification_.set (x);
  }

  void T_deserialize_request::
  setPoosl_specification (const Poosl_specificationOptional& x)
  {
    this->poosl_specification_ = x;
  }

  void T_deserialize_request::
  setPoosl_specification (::std::unique_ptr< Poosl_specificationType > x)
  {
    this->poosl_specification_.set (std::move (x));
  }

  const T_deserialize_request::Cluster_classOptional& T_deserialize_request::
  getCluster_class () const
  {
    return this->cluster_class_;
  }

  T_deserialize_request::Cluster_classOptional& T_deserialize_request::
  getCluster_class ()
  {
    return this->cluster_class_;
  }

  void T_deserialize_request::
  setCluster_class (const Cluster_classType& x)
  {
    this->cluster_class_.set (x);
  }

  void T_deserialize_request::
  setCluster_class (const Cluster_classOptional& x)
  {
    this->cluster_class_ = x;
  }

  void T_deserialize_request::
  setCluster_class (::std::unique_ptr< Cluster_classType > x)
  {
    this->cluster_class_.set (std::move (x));
  }

  const T_deserialize_request::Process_classOptional& T_deserialize_request::
  getProcess_class () const
  {
    return this->process_class_;
  }

  T_deserialize_request::Process_classOptional& T_deserialize_request::
  getProcess_class ()
  {
    return this->process_class_;
  }

  void T_deserialize_request::
  setProcess_class (const Process_classType& x)
  {
    this->process_class_.set (x);
  }

  void T_deserialize_request::
  setProcess_class (const Process_classOptional& x)
  {
    this->process_class_ = x;
  }

  void T_deserialize_request::
  setProcess_class (::std::unique_ptr< Process_classType > x)
  {
    this->process_class_.set (std::move (x));
  }

  const T_deserialize_request::Data_classOptional& T_deserialize_request::
  getData_class () const
  {
    return this->data_class_;
  }

  T_deserialize_request::Data_classOptional& T_deserialize_request::
  getData_class ()
  {
    return this->data_class_;
  }

  void T_deserialize_request::
  setData_class (const Data_classType& x)
  {
    this->data_class_.set (x);
  }

  void T_deserialize_request::
  setData_class (const Data_classOptional& x)
  {
    this->data_class_ = x;
  }

  void T_deserialize_request::
  setData_class (::std::unique_ptr< Data_classType > x)
  {
    this->data_class_.set (std::move (x));
  }

  const T_deserialize_request::Initial_method_callOptional& T_deserialize_request::
  getInitial_method_call () const
  {
    return this->initial_method_call_;
  }

  T_deserialize_request::Initial_method_callOptional& T_deserialize_request::
  getInitial_method_call ()
  {
    return this->initial_method_call_;
  }

  void T_deserialize_request::
  setInitial_method_call (const Initial_method_callType& x)
  {
    this->initial_method_call_.set (x);
  }

  void T_deserialize_request::
  setInitial_method_call (const Initial_method_callOptional& x)
  {
    this->initial_method_call_ = x;
  }

  void T_deserialize_request::
  setInitial_method_call (::std::unique_ptr< Initial_method_callType > x)
  {
    this->initial_method_call_.set (std::move (x));
  }

  const T_deserialize_request::Process_methodOptional& T_deserialize_request::
  getProcess_method () const
  {
    return this->process_method_;
  }

  T_deserialize_request::Process_methodOptional& T_deserialize_request::
  getProcess_method ()
  {
    return this->process_method_;
  }

  void T_deserialize_request::
  setProcess_method (const Process_methodType& x)
  {
    this->process_method_.set (x);
  }

  void T_deserialize_request::
  setProcess_method (const Process_methodOptional& x)
  {
    this->process_method_ = x;
  }

  void T_deserialize_request::
  setProcess_method (::std::unique_ptr< Process_methodType > x)
  {
    this->process_method_.set (std::move (x));
  }

  const T_deserialize_request::Data_methodOptional& T_deserialize_request::
  getData_method () const
  {
    return this->data_method_;
  }

  T_deserialize_request::Data_methodOptional& T_deserialize_request::
  getData_method ()
  {
    return this->data_method_;
  }

  void T_deserialize_request::
  setData_method (const Data_methodType& x)
  {
    this->data_method_.set (x);
  }

  void T_deserialize_request::
  setData_method (const Data_methodOptional& x)
  {
    this->data_method_ = x;
  }

  void T_deserialize_request::
  setData_method (::std::unique_ptr< Data_methodType > x)
  {
    this->data_method_.set (std::move (x));
  }

  const T_deserialize_request::ExpressionOptional& T_deserialize_request::
  getExpression () const
  {
    return this->expression_;
  }

  T_deserialize_request::ExpressionOptional& T_deserialize_request::
  getExpression ()
  {
    return this->expression_;
  }

  void T_deserialize_request::
  setExpression (const ExpressionType& x)
  {
    this->expression_.set (x);
  }

  void T_deserialize_request::
  setExpression (const ExpressionOptional& x)
  {
    this->expression_ = x;
  }

  void T_deserialize_request::
  setExpression (::std::unique_ptr< ExpressionType > x)
  {
    this->expression_.set (std::move (x));
  }


  // T_compile_request
  // 

  const T_compile_request::Basic_classesOptional& T_compile_request::
  getBasic_classes () const
  {
    return this->basic_classes_;
  }

  T_compile_request::Basic_classesOptional& T_compile_request::
  getBasic_classes ()
  {
    return this->basic_classes_;
  }

  void T_compile_request::
  setBasic_classes (const Basic_classesType& x)
  {
    this->basic_classes_.set (x);
  }

  void T_compile_request::
  setBasic_classes (const Basic_classesOptional& x)
  {
    this->basic_classes_ = x;
  }

  void T_compile_request::
  setBasic_classes (::std::unique_ptr< Basic_classesType > x)
  {
    this->basic_classes_.set (std::move (x));
  }

  const T_compile_request::Poosl_specificationOptional& T_compile_request::
  getPoosl_specification () const
  {
    return this->poosl_specification_;
  }

  T_compile_request::Poosl_specificationOptional& T_compile_request::
  getPoosl_specification ()
  {
    return this->poosl_specification_;
  }

  void T_compile_request::
  setPoosl_specification (const Poosl_specificationType& x)
  {
    this->poosl_specification_.set (x);
  }

  void T_compile_request::
  setPoosl_specification (const Poosl_specificationOptional& x)
  {
    this->poosl_specification_ = x;
  }

  void T_compile_request::
  setPoosl_specification (::std::unique_ptr< Poosl_specificationType > x)
  {
    this->poosl_specification_.set (std::move (x));
  }

  const T_compile_request::Cluster_classOptional& T_compile_request::
  getCluster_class () const
  {
    return this->cluster_class_;
  }

  T_compile_request::Cluster_classOptional& T_compile_request::
  getCluster_class ()
  {
    return this->cluster_class_;
  }

  void T_compile_request::
  setCluster_class (const Cluster_classType& x)
  {
    this->cluster_class_.set (x);
  }

  void T_compile_request::
  setCluster_class (const Cluster_classOptional& x)
  {
    this->cluster_class_ = x;
  }

  void T_compile_request::
  setCluster_class (::std::unique_ptr< Cluster_classType > x)
  {
    this->cluster_class_.set (std::move (x));
  }

  const T_compile_request::Process_classOptional& T_compile_request::
  getProcess_class () const
  {
    return this->process_class_;
  }

  T_compile_request::Process_classOptional& T_compile_request::
  getProcess_class ()
  {
    return this->process_class_;
  }

  void T_compile_request::
  setProcess_class (const Process_classType& x)
  {
    this->process_class_.set (x);
  }

  void T_compile_request::
  setProcess_class (const Process_classOptional& x)
  {
    this->process_class_ = x;
  }

  void T_compile_request::
  setProcess_class (::std::unique_ptr< Process_classType > x)
  {
    this->process_class_.set (std::move (x));
  }

  const T_compile_request::Data_classOptional& T_compile_request::
  getData_class () const
  {
    return this->data_class_;
  }

  T_compile_request::Data_classOptional& T_compile_request::
  getData_class ()
  {
    return this->data_class_;
  }

  void T_compile_request::
  setData_class (const Data_classType& x)
  {
    this->data_class_.set (x);
  }

  void T_compile_request::
  setData_class (const Data_classOptional& x)
  {
    this->data_class_ = x;
  }

  void T_compile_request::
  setData_class (::std::unique_ptr< Data_classType > x)
  {
    this->data_class_.set (std::move (x));
  }

  const T_compile_request::Initial_method_callOptional& T_compile_request::
  getInitial_method_call () const
  {
    return this->initial_method_call_;
  }

  T_compile_request::Initial_method_callOptional& T_compile_request::
  getInitial_method_call ()
  {
    return this->initial_method_call_;
  }

  void T_compile_request::
  setInitial_method_call (const Initial_method_callType& x)
  {
    this->initial_method_call_.set (x);
  }

  void T_compile_request::
  setInitial_method_call (const Initial_method_callOptional& x)
  {
    this->initial_method_call_ = x;
  }

  void T_compile_request::
  setInitial_method_call (::std::unique_ptr< Initial_method_callType > x)
  {
    this->initial_method_call_.set (std::move (x));
  }

  const T_compile_request::Process_methodOptional& T_compile_request::
  getProcess_method () const
  {
    return this->process_method_;
  }

  T_compile_request::Process_methodOptional& T_compile_request::
  getProcess_method ()
  {
    return this->process_method_;
  }

  void T_compile_request::
  setProcess_method (const Process_methodType& x)
  {
    this->process_method_.set (x);
  }

  void T_compile_request::
  setProcess_method (const Process_methodOptional& x)
  {
    this->process_method_ = x;
  }

  void T_compile_request::
  setProcess_method (::std::unique_ptr< Process_methodType > x)
  {
    this->process_method_.set (std::move (x));
  }

  const T_compile_request::Data_methodOptional& T_compile_request::
  getData_method () const
  {
    return this->data_method_;
  }

  T_compile_request::Data_methodOptional& T_compile_request::
  getData_method ()
  {
    return this->data_method_;
  }

  void T_compile_request::
  setData_method (const Data_methodType& x)
  {
    this->data_method_.set (x);
  }

  void T_compile_request::
  setData_method (const Data_methodOptional& x)
  {
    this->data_method_ = x;
  }

  void T_compile_request::
  setData_method (::std::unique_ptr< Data_methodType > x)
  {
    this->data_method_.set (std::move (x));
  }

  const T_compile_request::ExpressionOptional& T_compile_request::
  getExpression () const
  {
    return this->expression_;
  }

  T_compile_request::ExpressionOptional& T_compile_request::
  getExpression ()
  {
    return this->expression_;
  }

  void T_compile_request::
  setExpression (const ExpressionType& x)
  {
    this->expression_.set (x);
  }

  void T_compile_request::
  setExpression (const ExpressionOptional& x)
  {
    this->expression_ = x;
  }

  void T_compile_request::
  setExpression (::std::unique_ptr< ExpressionType > x)
  {
    this->expression_.set (std::move (x));
  }


  // T_list_classes_request
  // 


  // T_get_top_level_specification_request
  // 


  // T_get_class_definition_request
  // 

  const T_get_class_definition_request::ClassType& T_get_class_definition_request::
  getClass () const
  {
    return this->class__.get ();
  }

  T_get_class_definition_request::ClassType& T_get_class_definition_request::
  getClass ()
  {
    return this->class__.get ();
  }

  void T_get_class_definition_request::
  setClass (const ClassType& x)
  {
    this->class__.set (x);
  }

  void T_get_class_definition_request::
  setClass (::std::unique_ptr< ClassType > x)
  {
    this->class__.set (std::move (x));
  }


  // T_get_method_definition_request
  // 

  const T_get_method_definition_request::MethodType& T_get_method_definition_request::
  getMethod () const
  {
    return this->method_.get ();
  }

  T_get_method_definition_request::MethodType& T_get_method_definition_request::
  getMethod ()
  {
    return this->method_.get ();
  }

  void T_get_method_definition_request::
  setMethod (const MethodType& x)
  {
    this->method_.set (x);
  }

  void T_get_method_definition_request::
  setMethod (::std::unique_ptr< MethodType > x)
  {
    this->method_.set (std::move (x));
  }


  // T_get_object_handle_request
  // 

  const T_get_object_handle_request::NameType& T_get_object_handle_request::
  getName () const
  {
    return this->name_.get ();
  }

  T_get_object_handle_request::NameType& T_get_object_handle_request::
  getName ()
  {
    return this->name_.get ();
  }

  void T_get_object_handle_request::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void T_get_object_handle_request::
  setName (::std::unique_ptr< NameType > x)
  {
    this->name_.set (std::move (x));
  }

  const T_get_object_handle_request::TypeType& T_get_object_handle_request::
  getType () const
  {
    return this->type_.get ();
  }

  T_get_object_handle_request::TypeType& T_get_object_handle_request::
  getType ()
  {
    return this->type_.get ();
  }

  void T_get_object_handle_request::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_get_object_handle_request::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }


  // T_rename_object_request
  // 

  const T_rename_object_request::HandleType& T_rename_object_request::
  getHandle () const
  {
    return this->handle_.get ();
  }

  T_rename_object_request::HandleType& T_rename_object_request::
  getHandle ()
  {
    return this->handle_.get ();
  }

  void T_rename_object_request::
  setHandle (const HandleType& x)
  {
    this->handle_.set (x);
  }

  const T_rename_object_request::New_nameType& T_rename_object_request::
  getNew_name () const
  {
    return this->new_name_.get ();
  }

  T_rename_object_request::New_nameType& T_rename_object_request::
  getNew_name ()
  {
    return this->new_name_.get ();
  }

  void T_rename_object_request::
  setNew_name (const New_nameType& x)
  {
    this->new_name_.set (x);
  }

  void T_rename_object_request::
  setNew_name (::std::unique_ptr< New_nameType > x)
  {
    this->new_name_.set (std::move (x));
  }


  // T_insert_object_request
  // 

  const T_insert_object_request::OwnerType& T_insert_object_request::
  getOwner () const
  {
    return this->owner_.get ();
  }

  T_insert_object_request::OwnerType& T_insert_object_request::
  getOwner ()
  {
    return this->owner_.get ();
  }

  void T_insert_object_request::
  setOwner (const OwnerType& x)
  {
    this->owner_.set (x);
  }

  const T_insert_object_request::PropertyType& T_insert_object_request::
  getProperty () const
  {
    return this->property_.get ();
  }

  T_insert_object_request::PropertyType& T_insert_object_request::
  getProperty ()
  {
    return this->property_.get ();
  }

  void T_insert_object_request::
  setProperty (const PropertyType& x)
  {
    this->property_.set (x);
  }

  void T_insert_object_request::
  setProperty (::std::unique_ptr< PropertyType > x)
  {
    this->property_.set (std::move (x));
  }

  const T_insert_object_request::ValueType& T_insert_object_request::
  getValue () const
  {
    return this->value_.get ();
  }

  T_insert_object_request::ValueType& T_insert_object_request::
  getValue ()
  {
    return this->value_.get ();
  }

  void T_insert_object_request::
  setValue (const ValueType& x)
  {
    this->value_.set (x);
  }


  // T_delete_object_request
  // 

  const T_delete_object_request::ObjectSequence& T_delete_object_request::
  getObject () const
  {
    return this->object_;
  }

  T_delete_object_request::ObjectSequence& T_delete_object_request::
  getObject ()
  {
    return this->object_;
  }

  void T_delete_object_request::
  setObject (const ObjectSequence& s)
  {
    this->object_ = s;
  }


  // T_instantiate_request
  // 

  const T_instantiate_request::Poosl_specificationType& T_instantiate_request::
  getPoosl_specification () const
  {
    return this->poosl_specification_.get ();
  }

  T_instantiate_request::Poosl_specificationType& T_instantiate_request::
  getPoosl_specification ()
  {
    return this->poosl_specification_.get ();
  }

  void T_instantiate_request::
  setPoosl_specification (const Poosl_specificationType& x)
  {
    this->poosl_specification_.set (x);
  }


  // T_list_files_request
  // 

  const T_list_files_request::Poosl_specificationType& T_list_files_request::
  getPoosl_specification () const
  {
    return this->poosl_specification_.get ();
  }

  T_list_files_request::Poosl_specificationType& T_list_files_request::
  getPoosl_specification ()
  {
    return this->poosl_specification_.get ();
  }

  void T_list_files_request::
  setPoosl_specification (const Poosl_specificationType& x)
  {
    this->poosl_specification_.set (x);
  }


  // T_get_position_request
  // 

  const T_get_position_request::Stmt_handleType& T_get_position_request::
  getStmt_handle () const
  {
    return this->stmt_handle_.get ();
  }

  T_get_position_request::Stmt_handleType& T_get_position_request::
  getStmt_handle ()
  {
    return this->stmt_handle_.get ();
  }

  void T_get_position_request::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }


  // T_command_request
  // 

  const T_command_request::TypeOptional& T_command_request::
  getType () const
  {
    return this->type_;
  }

  T_command_request::TypeOptional& T_command_request::
  getType ()
  {
    return this->type_;
  }

  void T_command_request::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_command_request::
  setType (const TypeOptional& x)
  {
    this->type_ = x;
  }

  void T_command_request::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }


  // T_execution_state_request
  // 


  // T_get_transitions_request
  // 


  // T_perform_transition_request
  // 

  const T_perform_transition_request::HandleType& T_perform_transition_request::
  getHandle () const
  {
    return this->handle_.get ();
  }

  T_perform_transition_request::HandleType& T_perform_transition_request::
  getHandle ()
  {
    return this->handle_.get ();
  }

  void T_perform_transition_request::
  setHandle (const HandleType& x)
  {
    this->handle_.set (x);
  }

  const T_perform_transition_request::Data_debugOptional& T_perform_transition_request::
  getData_debug () const
  {
    return this->data_debug_;
  }

  T_perform_transition_request::Data_debugOptional& T_perform_transition_request::
  getData_debug ()
  {
    return this->data_debug_;
  }

  void T_perform_transition_request::
  setData_debug (const Data_debugType& x)
  {
    this->data_debug_.set (x);
  }

  void T_perform_transition_request::
  setData_debug (const Data_debugOptional& x)
  {
    this->data_debug_ = x;
  }


  // T_perform_process_step_request
  // 

  const T_perform_process_step_request::Process_pathType& T_perform_process_step_request::
  getProcess_path () const
  {
    return this->process_path_.get ();
  }

  T_perform_process_step_request::Process_pathType& T_perform_process_step_request::
  getProcess_path ()
  {
    return this->process_path_.get ();
  }

  void T_perform_process_step_request::
  setProcess_path (const Process_pathType& x)
  {
    this->process_path_.set (x);
  }

  void T_perform_process_step_request::
  setProcess_path (::std::unique_ptr< Process_pathType > x)
  {
    this->process_path_.set (std::move (x));
  }


  // T_inspect_request
  // 

  const T_inspect_request::NameOptional& T_inspect_request::
  getName () const
  {
    return this->name_;
  }

  T_inspect_request::NameOptional& T_inspect_request::
  getName ()
  {
    return this->name_;
  }

  void T_inspect_request::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void T_inspect_request::
  setName (const NameOptional& x)
  {
    this->name_ = x;
  }

  void T_inspect_request::
  setName (::std::unique_ptr< NameType > x)
  {
    this->name_.set (std::move (x));
  }

  const T_inspect_request::TypeOptional& T_inspect_request::
  getType () const
  {
    return this->type_;
  }

  T_inspect_request::TypeOptional& T_inspect_request::
  getType ()
  {
    return this->type_;
  }

  void T_inspect_request::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_inspect_request::
  setType (const TypeOptional& x)
  {
    this->type_ = x;
  }

  void T_inspect_request::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }

  const T_inspect_request::HandleOptional& T_inspect_request::
  getHandle () const
  {
    return this->handle_;
  }

  T_inspect_request::HandleOptional& T_inspect_request::
  getHandle ()
  {
    return this->handle_;
  }

  void T_inspect_request::
  setHandle (const HandleType& x)
  {
    this->handle_.set (x);
  }

  void T_inspect_request::
  setHandle (const HandleOptional& x)
  {
    this->handle_ = x;
  }


  // T_observe_request
  // 

  const T_observe_request::TypeType& T_observe_request::
  getType () const
  {
    return this->type_.get ();
  }

  T_observe_request::TypeType& T_observe_request::
  getType ()
  {
    return this->type_.get ();
  }

  void T_observe_request::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_observe_request::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }

  const T_observe_request::HandleType& T_observe_request::
  getHandle () const
  {
    return this->handle_.get ();
  }

  T_observe_request::HandleType& T_observe_request::
  getHandle ()
  {
    return this->handle_.get ();
  }

  void T_observe_request::
  setHandle (const HandleType& x)
  {
    this->handle_.set (x);
  }


  // T_eengine_event_setup_request
  // 

  const T_eengine_event_setup_request::Communication_messages_enableType& T_eengine_event_setup_request::
  getCommunication_messages_enable () const
  {
    return this->communication_messages_enable_.get ();
  }

  T_eengine_event_setup_request::Communication_messages_enableType& T_eengine_event_setup_request::
  getCommunication_messages_enable ()
  {
    return this->communication_messages_enable_.get ();
  }

  void T_eengine_event_setup_request::
  setCommunication_messages_enable (const Communication_messages_enableType& x)
  {
    this->communication_messages_enable_.set (x);
  }

  const T_eengine_event_setup_request::Communication_messages_creditsOptional& T_eengine_event_setup_request::
  getCommunication_messages_credits () const
  {
    return this->communication_messages_credits_;
  }

  T_eengine_event_setup_request::Communication_messages_creditsOptional& T_eengine_event_setup_request::
  getCommunication_messages_credits ()
  {
    return this->communication_messages_credits_;
  }

  void T_eengine_event_setup_request::
  setCommunication_messages_credits (const Communication_messages_creditsType& x)
  {
    this->communication_messages_credits_.set (x);
  }

  void T_eengine_event_setup_request::
  setCommunication_messages_credits (const Communication_messages_creditsOptional& x)
  {
    this->communication_messages_credits_ = x;
  }

  const T_eengine_event_setup_request::Communication_messages_credits_enableType& T_eengine_event_setup_request::
  getCommunication_messages_credits_enable () const
  {
    return this->communication_messages_credits_enable_.get ();
  }

  T_eengine_event_setup_request::Communication_messages_credits_enableType& T_eengine_event_setup_request::
  getCommunication_messages_credits_enable ()
  {
    return this->communication_messages_credits_enable_.get ();
  }

  void T_eengine_event_setup_request::
  setCommunication_messages_credits_enable (const Communication_messages_credits_enableType& x)
  {
    this->communication_messages_credits_enable_.set (x);
  }


  // T_eengine_event_communication_credits_replenish
  // 

  const T_eengine_event_communication_credits_replenish::CreditType& T_eengine_event_communication_credits_replenish::
  getCredit () const
  {
    return this->credit_.get ();
  }

  T_eengine_event_communication_credits_replenish::CreditType& T_eengine_event_communication_credits_replenish::
  getCredit ()
  {
    return this->credit_.get ();
  }

  void T_eengine_event_communication_credits_replenish::
  setCredit (const CreditType& x)
  {
    this->credit_.set (x);
  }


  // T_create_breakpoint_request
  // 

  const T_create_breakpoint_request::NameOptional& T_create_breakpoint_request::
  getName () const
  {
    return this->name_;
  }

  T_create_breakpoint_request::NameOptional& T_create_breakpoint_request::
  getName ()
  {
    return this->name_;
  }

  void T_create_breakpoint_request::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void T_create_breakpoint_request::
  setName (const NameOptional& x)
  {
    this->name_ = x;
  }

  void T_create_breakpoint_request::
  setName (::std::unique_ptr< NameType > x)
  {
    this->name_.set (std::move (x));
  }

  const T_create_breakpoint_request::Control_pointOptional& T_create_breakpoint_request::
  getControl_point () const
  {
    return this->control_point_;
  }

  T_create_breakpoint_request::Control_pointOptional& T_create_breakpoint_request::
  getControl_point ()
  {
    return this->control_point_;
  }

  void T_create_breakpoint_request::
  setControl_point (const Control_pointType& x)
  {
    this->control_point_.set (x);
  }

  void T_create_breakpoint_request::
  setControl_point (const Control_pointOptional& x)
  {
    this->control_point_ = x;
  }

  const T_create_breakpoint_request::Stmt_handleOptional& T_create_breakpoint_request::
  getStmt_handle () const
  {
    return this->stmt_handle_;
  }

  T_create_breakpoint_request::Stmt_handleOptional& T_create_breakpoint_request::
  getStmt_handle ()
  {
    return this->stmt_handle_;
  }

  void T_create_breakpoint_request::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }

  void T_create_breakpoint_request::
  setStmt_handle (const Stmt_handleOptional& x)
  {
    this->stmt_handle_ = x;
  }

  const T_create_breakpoint_request::PositionOptional& T_create_breakpoint_request::
  getPosition () const
  {
    return this->position_;
  }

  T_create_breakpoint_request::PositionOptional& T_create_breakpoint_request::
  getPosition ()
  {
    return this->position_;
  }

  void T_create_breakpoint_request::
  setPosition (const PositionType& x)
  {
    this->position_.set (x);
  }

  void T_create_breakpoint_request::
  setPosition (const PositionOptional& x)
  {
    this->position_ = x;
  }

  void T_create_breakpoint_request::
  setPosition (::std::unique_ptr< PositionType > x)
  {
    this->position_.set (std::move (x));
  }


  // T_set_breakpoint_condition_request
  // 

  const T_set_breakpoint_condition_request::Breakpoint_idType& T_set_breakpoint_condition_request::
  getBreakpoint_id () const
  {
    return this->breakpoint_id_.get ();
  }

  T_set_breakpoint_condition_request::Breakpoint_idType& T_set_breakpoint_condition_request::
  getBreakpoint_id ()
  {
    return this->breakpoint_id_.get ();
  }

  void T_set_breakpoint_condition_request::
  setBreakpoint_id (const Breakpoint_idType& x)
  {
    this->breakpoint_id_.set (x);
  }

  const T_set_breakpoint_condition_request::ConditionType& T_set_breakpoint_condition_request::
  getCondition () const
  {
    return this->condition_.get ();
  }

  T_set_breakpoint_condition_request::ConditionType& T_set_breakpoint_condition_request::
  getCondition ()
  {
    return this->condition_.get ();
  }

  void T_set_breakpoint_condition_request::
  setCondition (const ConditionType& x)
  {
    this->condition_.set (x);
  }

  void T_set_breakpoint_condition_request::
  setCondition (::std::unique_ptr< ConditionType > x)
  {
    this->condition_.set (std::move (x));
  }


  // T_enable_breakpoint_request
  // 

  const T_enable_breakpoint_request::Breakpoint_idType& T_enable_breakpoint_request::
  getBreakpoint_id () const
  {
    return this->breakpoint_id_.get ();
  }

  T_enable_breakpoint_request::Breakpoint_idType& T_enable_breakpoint_request::
  getBreakpoint_id ()
  {
    return this->breakpoint_id_.get ();
  }

  void T_enable_breakpoint_request::
  setBreakpoint_id (const Breakpoint_idType& x)
  {
    this->breakpoint_id_.set (x);
  }

  const T_enable_breakpoint_request::Control_pointType& T_enable_breakpoint_request::
  getControl_point () const
  {
    return this->control_point_.get ();
  }

  T_enable_breakpoint_request::Control_pointType& T_enable_breakpoint_request::
  getControl_point ()
  {
    return this->control_point_.get ();
  }

  void T_enable_breakpoint_request::
  setControl_point (const Control_pointType& x)
  {
    this->control_point_.set (x);
  }

  const T_enable_breakpoint_request::Stmt_handleType& T_enable_breakpoint_request::
  getStmt_handle () const
  {
    return this->stmt_handle_.get ();
  }

  T_enable_breakpoint_request::Stmt_handleType& T_enable_breakpoint_request::
  getStmt_handle ()
  {
    return this->stmt_handle_.get ();
  }

  void T_enable_breakpoint_request::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }


  // T_disable_breakpoint_request
  // 

  const T_disable_breakpoint_request::Breakpoint_idType& T_disable_breakpoint_request::
  getBreakpoint_id () const
  {
    return this->breakpoint_id_.get ();
  }

  T_disable_breakpoint_request::Breakpoint_idType& T_disable_breakpoint_request::
  getBreakpoint_id ()
  {
    return this->breakpoint_id_.get ();
  }

  void T_disable_breakpoint_request::
  setBreakpoint_id (const Breakpoint_idType& x)
  {
    this->breakpoint_id_.set (x);
  }

  const T_disable_breakpoint_request::Control_pointType& T_disable_breakpoint_request::
  getControl_point () const
  {
    return this->control_point_.get ();
  }

  T_disable_breakpoint_request::Control_pointType& T_disable_breakpoint_request::
  getControl_point ()
  {
    return this->control_point_.get ();
  }

  void T_disable_breakpoint_request::
  setControl_point (const Control_pointType& x)
  {
    this->control_point_.set (x);
  }

  const T_disable_breakpoint_request::Stmt_handleType& T_disable_breakpoint_request::
  getStmt_handle () const
  {
    return this->stmt_handle_.get ();
  }

  T_disable_breakpoint_request::Stmt_handleType& T_disable_breakpoint_request::
  getStmt_handle ()
  {
    return this->stmt_handle_.get ();
  }

  void T_disable_breakpoint_request::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }


  // T_delete_breakpoint_request
  // 

  const T_delete_breakpoint_request::Breakpoint_idType& T_delete_breakpoint_request::
  getBreakpoint_id () const
  {
    return this->breakpoint_id_.get ();
  }

  T_delete_breakpoint_request::Breakpoint_idType& T_delete_breakpoint_request::
  getBreakpoint_id ()
  {
    return this->breakpoint_id_.get ();
  }

  void T_delete_breakpoint_request::
  setBreakpoint_id (const Breakpoint_idType& x)
  {
    this->breakpoint_id_.set (x);
  }

  const T_delete_breakpoint_request::Control_pointType& T_delete_breakpoint_request::
  getControl_point () const
  {
    return this->control_point_.get ();
  }

  T_delete_breakpoint_request::Control_pointType& T_delete_breakpoint_request::
  getControl_point ()
  {
    return this->control_point_.get ();
  }

  void T_delete_breakpoint_request::
  setControl_point (const Control_pointType& x)
  {
    this->control_point_.set (x);
  }

  const T_delete_breakpoint_request::Stmt_handleType& T_delete_breakpoint_request::
  getStmt_handle () const
  {
    return this->stmt_handle_.get ();
  }

  T_delete_breakpoint_request::Stmt_handleType& T_delete_breakpoint_request::
  getStmt_handle ()
  {
    return this->stmt_handle_.get ();
  }

  void T_delete_breakpoint_request::
  setStmt_handle (const Stmt_handleType& x)
  {
    this->stmt_handle_.set (x);
  }


  // T_set_variable_request
  // 

  const T_set_variable_request::Var_handleType& T_set_variable_request::
  getVar_handle () const
  {
    return this->var_handle_.get ();
  }

  T_set_variable_request::Var_handleType& T_set_variable_request::
  getVar_handle ()
  {
    return this->var_handle_.get ();
  }

  void T_set_variable_request::
  setVar_handle (const Var_handleType& x)
  {
    this->var_handle_.set (x);
  }

  void T_set_variable_request::
  setVar_handle (::std::unique_ptr< Var_handleType > x)
  {
    this->var_handle_.set (std::move (x));
  }

  const T_set_variable_request::List_handleType& T_set_variable_request::
  getList_handle () const
  {
    return this->list_handle_.get ();
  }

  T_set_variable_request::List_handleType& T_set_variable_request::
  getList_handle ()
  {
    return this->list_handle_.get ();
  }

  void T_set_variable_request::
  setList_handle (const List_handleType& x)
  {
    this->list_handle_.set (x);
  }

  void T_set_variable_request::
  setList_handle (::std::unique_ptr< List_handleType > x)
  {
    this->list_handle_.set (std::move (x));
  }

  const T_set_variable_request::TypeType& T_set_variable_request::
  getType () const
  {
    return this->type_.get ();
  }

  T_set_variable_request::TypeType& T_set_variable_request::
  getType ()
  {
    return this->type_.get ();
  }

  void T_set_variable_request::
  setType (const TypeType& x)
  {
    this->type_.set (x);
  }

  void T_set_variable_request::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->type_.set (std::move (x));
  }

  const T_set_variable_request::LiteralType& T_set_variable_request::
  getLiteral () const
  {
    return this->literal_.get ();
  }

  T_set_variable_request::LiteralType& T_set_variable_request::
  getLiteral ()
  {
    return this->literal_.get ();
  }

  void T_set_variable_request::
  setLiteral (const LiteralType& x)
  {
    this->literal_.set (x);
  }

  void T_set_variable_request::
  setLiteral (::std::unique_ptr< LiteralType > x)
  {
    this->literal_.set (std::move (x));
  }


  // Request
  // 

  const Request::LoadOptional& Request::
  getLoad () const
  {
    return this->load_;
  }

  Request::LoadOptional& Request::
  getLoad ()
  {
    return this->load_;
  }

  void Request::
  setLoad (const LoadType& x)
  {
    this->load_.set (x);
  }

  void Request::
  setLoad (const LoadOptional& x)
  {
    this->load_ = x;
  }

  void Request::
  setLoad (::std::unique_ptr< LoadType > x)
  {
    this->load_.set (std::move (x));
  }

  const Request::SaveOptional& Request::
  getSave () const
  {
    return this->save_;
  }

  Request::SaveOptional& Request::
  getSave ()
  {
    return this->save_;
  }

  void Request::
  setSave (const SaveType& x)
  {
    this->save_.set (x);
  }

  void Request::
  setSave (const SaveOptional& x)
  {
    this->save_ = x;
  }

  void Request::
  setSave (::std::unique_ptr< SaveType > x)
  {
    this->save_.set (std::move (x));
  }

  const Request::SerializeOptional& Request::
  getSerialize () const
  {
    return this->serialize_;
  }

  Request::SerializeOptional& Request::
  getSerialize ()
  {
    return this->serialize_;
  }

  void Request::
  setSerialize (const SerializeType& x)
  {
    this->serialize_.set (x);
  }

  void Request::
  setSerialize (const SerializeOptional& x)
  {
    this->serialize_ = x;
  }

  void Request::
  setSerialize (::std::unique_ptr< SerializeType > x)
  {
    this->serialize_.set (std::move (x));
  }

  const Request::DeserializeOptional& Request::
  getDeserialize () const
  {
    return this->deserialize_;
  }

  Request::DeserializeOptional& Request::
  getDeserialize ()
  {
    return this->deserialize_;
  }

  void Request::
  setDeserialize (const DeserializeType& x)
  {
    this->deserialize_.set (x);
  }

  void Request::
  setDeserialize (const DeserializeOptional& x)
  {
    this->deserialize_ = x;
  }

  void Request::
  setDeserialize (::std::unique_ptr< DeserializeType > x)
  {
    this->deserialize_.set (std::move (x));
  }

  const Request::CompileOptional& Request::
  getCompile () const
  {
    return this->compile_;
  }

  Request::CompileOptional& Request::
  getCompile ()
  {
    return this->compile_;
  }

  void Request::
  setCompile (const CompileType& x)
  {
    this->compile_.set (x);
  }

  void Request::
  setCompile (const CompileOptional& x)
  {
    this->compile_ = x;
  }

  void Request::
  setCompile (::std::unique_ptr< CompileType > x)
  {
    this->compile_.set (std::move (x));
  }

  const Request::List_filesOptional& Request::
  getList_files () const
  {
    return this->list_files_;
  }

  Request::List_filesOptional& Request::
  getList_files ()
  {
    return this->list_files_;
  }

  void Request::
  setList_files (const List_filesType& x)
  {
    this->list_files_.set (x);
  }

  void Request::
  setList_files (const List_filesOptional& x)
  {
    this->list_files_ = x;
  }

  void Request::
  setList_files (::std::unique_ptr< List_filesType > x)
  {
    this->list_files_.set (std::move (x));
  }

  const Request::Get_positionOptional& Request::
  getGet_position () const
  {
    return this->get_position_;
  }

  Request::Get_positionOptional& Request::
  getGet_position ()
  {
    return this->get_position_;
  }

  void Request::
  setGet_position (const Get_positionType& x)
  {
    this->get_position_.set (x);
  }

  void Request::
  setGet_position (const Get_positionOptional& x)
  {
    this->get_position_ = x;
  }

  void Request::
  setGet_position (::std::unique_ptr< Get_positionType > x)
  {
    this->get_position_.set (std::move (x));
  }

  const Request::List_classesOptional& Request::
  getList_classes () const
  {
    return this->list_classes_;
  }

  Request::List_classesOptional& Request::
  getList_classes ()
  {
    return this->list_classes_;
  }

  void Request::
  setList_classes (const List_classesType& x)
  {
    this->list_classes_.set (x);
  }

  void Request::
  setList_classes (const List_classesOptional& x)
  {
    this->list_classes_ = x;
  }

  void Request::
  setList_classes (::std::unique_ptr< List_classesType > x)
  {
    this->list_classes_.set (std::move (x));
  }

  const Request::Get_top_level_specificationOptional& Request::
  getGet_top_level_specification () const
  {
    return this->get_top_level_specification_;
  }

  Request::Get_top_level_specificationOptional& Request::
  getGet_top_level_specification ()
  {
    return this->get_top_level_specification_;
  }

  void Request::
  setGet_top_level_specification (const Get_top_level_specificationType& x)
  {
    this->get_top_level_specification_.set (x);
  }

  void Request::
  setGet_top_level_specification (const Get_top_level_specificationOptional& x)
  {
    this->get_top_level_specification_ = x;
  }

  void Request::
  setGet_top_level_specification (::std::unique_ptr< Get_top_level_specificationType > x)
  {
    this->get_top_level_specification_.set (std::move (x));
  }

  const Request::Get_class_definitionOptional& Request::
  getGet_class_definition () const
  {
    return this->get_class_definition_;
  }

  Request::Get_class_definitionOptional& Request::
  getGet_class_definition ()
  {
    return this->get_class_definition_;
  }

  void Request::
  setGet_class_definition (const Get_class_definitionType& x)
  {
    this->get_class_definition_.set (x);
  }

  void Request::
  setGet_class_definition (const Get_class_definitionOptional& x)
  {
    this->get_class_definition_ = x;
  }

  void Request::
  setGet_class_definition (::std::unique_ptr< Get_class_definitionType > x)
  {
    this->get_class_definition_.set (std::move (x));
  }

  const Request::Get_object_handleOptional& Request::
  getGet_object_handle () const
  {
    return this->get_object_handle_;
  }

  Request::Get_object_handleOptional& Request::
  getGet_object_handle ()
  {
    return this->get_object_handle_;
  }

  void Request::
  setGet_object_handle (const Get_object_handleType& x)
  {
    this->get_object_handle_.set (x);
  }

  void Request::
  setGet_object_handle (const Get_object_handleOptional& x)
  {
    this->get_object_handle_ = x;
  }

  void Request::
  setGet_object_handle (::std::unique_ptr< Get_object_handleType > x)
  {
    this->get_object_handle_.set (std::move (x));
  }

  const Request::Get_method_definitionOptional& Request::
  getGet_method_definition () const
  {
    return this->get_method_definition_;
  }

  Request::Get_method_definitionOptional& Request::
  getGet_method_definition ()
  {
    return this->get_method_definition_;
  }

  void Request::
  setGet_method_definition (const Get_method_definitionType& x)
  {
    this->get_method_definition_.set (x);
  }

  void Request::
  setGet_method_definition (const Get_method_definitionOptional& x)
  {
    this->get_method_definition_ = x;
  }

  void Request::
  setGet_method_definition (::std::unique_ptr< Get_method_definitionType > x)
  {
    this->get_method_definition_.set (std::move (x));
  }

  const Request::Rename_object_requestOptional& Request::
  getRename_object_request () const
  {
    return this->rename_object_request_;
  }

  Request::Rename_object_requestOptional& Request::
  getRename_object_request ()
  {
    return this->rename_object_request_;
  }

  void Request::
  setRename_object_request (const Rename_object_requestType& x)
  {
    this->rename_object_request_.set (x);
  }

  void Request::
  setRename_object_request (const Rename_object_requestOptional& x)
  {
    this->rename_object_request_ = x;
  }

  void Request::
  setRename_object_request (::std::unique_ptr< Rename_object_requestType > x)
  {
    this->rename_object_request_.set (std::move (x));
  }

  const Request::Insert_object_requestOptional& Request::
  getInsert_object_request () const
  {
    return this->insert_object_request_;
  }

  Request::Insert_object_requestOptional& Request::
  getInsert_object_request ()
  {
    return this->insert_object_request_;
  }

  void Request::
  setInsert_object_request (const Insert_object_requestType& x)
  {
    this->insert_object_request_.set (x);
  }

  void Request::
  setInsert_object_request (const Insert_object_requestOptional& x)
  {
    this->insert_object_request_ = x;
  }

  void Request::
  setInsert_object_request (::std::unique_ptr< Insert_object_requestType > x)
  {
    this->insert_object_request_.set (std::move (x));
  }

  const Request::Delete_object_requestOptional& Request::
  getDelete_object_request () const
  {
    return this->delete_object_request_;
  }

  Request::Delete_object_requestOptional& Request::
  getDelete_object_request ()
  {
    return this->delete_object_request_;
  }

  void Request::
  setDelete_object_request (const Delete_object_requestType& x)
  {
    this->delete_object_request_.set (x);
  }

  void Request::
  setDelete_object_request (const Delete_object_requestOptional& x)
  {
    this->delete_object_request_ = x;
  }

  void Request::
  setDelete_object_request (::std::unique_ptr< Delete_object_requestType > x)
  {
    this->delete_object_request_.set (std::move (x));
  }

  const Request::InstantiateOptional& Request::
  getInstantiate () const
  {
    return this->instantiate_;
  }

  Request::InstantiateOptional& Request::
  getInstantiate ()
  {
    return this->instantiate_;
  }

  void Request::
  setInstantiate (const InstantiateType& x)
  {
    this->instantiate_.set (x);
  }

  void Request::
  setInstantiate (const InstantiateOptional& x)
  {
    this->instantiate_ = x;
  }

  void Request::
  setInstantiate (::std::unique_ptr< InstantiateType > x)
  {
    this->instantiate_.set (std::move (x));
  }

  const Request::CommandOptional& Request::
  getCommand () const
  {
    return this->command_;
  }

  Request::CommandOptional& Request::
  getCommand ()
  {
    return this->command_;
  }

  void Request::
  setCommand (const CommandType& x)
  {
    this->command_.set (x);
  }

  void Request::
  setCommand (const CommandOptional& x)
  {
    this->command_ = x;
  }

  void Request::
  setCommand (::std::unique_ptr< CommandType > x)
  {
    this->command_.set (std::move (x));
  }

  const Request::Execution_stateOptional& Request::
  getExecution_state () const
  {
    return this->execution_state_;
  }

  Request::Execution_stateOptional& Request::
  getExecution_state ()
  {
    return this->execution_state_;
  }

  void Request::
  setExecution_state (const Execution_stateType& x)
  {
    this->execution_state_.set (x);
  }

  void Request::
  setExecution_state (const Execution_stateOptional& x)
  {
    this->execution_state_ = x;
  }

  void Request::
  setExecution_state (::std::unique_ptr< Execution_stateType > x)
  {
    this->execution_state_.set (std::move (x));
  }

  const Request::Get_transitionsOptional& Request::
  getGet_transitions () const
  {
    return this->get_transitions_;
  }

  Request::Get_transitionsOptional& Request::
  getGet_transitions ()
  {
    return this->get_transitions_;
  }

  void Request::
  setGet_transitions (const Get_transitionsType& x)
  {
    this->get_transitions_.set (x);
  }

  void Request::
  setGet_transitions (const Get_transitionsOptional& x)
  {
    this->get_transitions_ = x;
  }

  void Request::
  setGet_transitions (::std::unique_ptr< Get_transitionsType > x)
  {
    this->get_transitions_.set (std::move (x));
  }

  const Request::Perform_transitionOptional& Request::
  getPerform_transition () const
  {
    return this->perform_transition_;
  }

  Request::Perform_transitionOptional& Request::
  getPerform_transition ()
  {
    return this->perform_transition_;
  }

  void Request::
  setPerform_transition (const Perform_transitionType& x)
  {
    this->perform_transition_.set (x);
  }

  void Request::
  setPerform_transition (const Perform_transitionOptional& x)
  {
    this->perform_transition_ = x;
  }

  void Request::
  setPerform_transition (::std::unique_ptr< Perform_transitionType > x)
  {
    this->perform_transition_.set (std::move (x));
  }

  const Request::Perform_process_stepOptional& Request::
  getPerform_process_step () const
  {
    return this->perform_process_step_;
  }

  Request::Perform_process_stepOptional& Request::
  getPerform_process_step ()
  {
    return this->perform_process_step_;
  }

  void Request::
  setPerform_process_step (const Perform_process_stepType& x)
  {
    this->perform_process_step_.set (x);
  }

  void Request::
  setPerform_process_step (const Perform_process_stepOptional& x)
  {
    this->perform_process_step_ = x;
  }

  void Request::
  setPerform_process_step (::std::unique_ptr< Perform_process_stepType > x)
  {
    this->perform_process_step_.set (std::move (x));
  }

  const Request::InspectOptional& Request::
  getInspect () const
  {
    return this->inspect_;
  }

  Request::InspectOptional& Request::
  getInspect ()
  {
    return this->inspect_;
  }

  void Request::
  setInspect (const InspectType& x)
  {
    this->inspect_.set (x);
  }

  void Request::
  setInspect (const InspectOptional& x)
  {
    this->inspect_ = x;
  }

  void Request::
  setInspect (::std::unique_ptr< InspectType > x)
  {
    this->inspect_.set (std::move (x));
  }

  const Request::ObserveOptional& Request::
  getObserve () const
  {
    return this->observe_;
  }

  Request::ObserveOptional& Request::
  getObserve ()
  {
    return this->observe_;
  }

  void Request::
  setObserve (const ObserveType& x)
  {
    this->observe_.set (x);
  }

  void Request::
  setObserve (const ObserveOptional& x)
  {
    this->observe_ = x;
  }

  void Request::
  setObserve (::std::unique_ptr< ObserveType > x)
  {
    this->observe_.set (std::move (x));
  }

  const Request::Create_breakpointOptional& Request::
  getCreate_breakpoint () const
  {
    return this->create_breakpoint_;
  }

  Request::Create_breakpointOptional& Request::
  getCreate_breakpoint ()
  {
    return this->create_breakpoint_;
  }

  void Request::
  setCreate_breakpoint (const Create_breakpointType& x)
  {
    this->create_breakpoint_.set (x);
  }

  void Request::
  setCreate_breakpoint (const Create_breakpointOptional& x)
  {
    this->create_breakpoint_ = x;
  }

  void Request::
  setCreate_breakpoint (::std::unique_ptr< Create_breakpointType > x)
  {
    this->create_breakpoint_.set (std::move (x));
  }

  const Request::Set_breakpoint_conditionOptional& Request::
  getSet_breakpoint_condition () const
  {
    return this->set_breakpoint_condition_;
  }

  Request::Set_breakpoint_conditionOptional& Request::
  getSet_breakpoint_condition ()
  {
    return this->set_breakpoint_condition_;
  }

  void Request::
  setSet_breakpoint_condition (const Set_breakpoint_conditionType& x)
  {
    this->set_breakpoint_condition_.set (x);
  }

  void Request::
  setSet_breakpoint_condition (const Set_breakpoint_conditionOptional& x)
  {
    this->set_breakpoint_condition_ = x;
  }

  void Request::
  setSet_breakpoint_condition (::std::unique_ptr< Set_breakpoint_conditionType > x)
  {
    this->set_breakpoint_condition_.set (std::move (x));
  }

  const Request::Enable_breakpointOptional& Request::
  getEnable_breakpoint () const
  {
    return this->enable_breakpoint_;
  }

  Request::Enable_breakpointOptional& Request::
  getEnable_breakpoint ()
  {
    return this->enable_breakpoint_;
  }

  void Request::
  setEnable_breakpoint (const Enable_breakpointType& x)
  {
    this->enable_breakpoint_.set (x);
  }

  void Request::
  setEnable_breakpoint (const Enable_breakpointOptional& x)
  {
    this->enable_breakpoint_ = x;
  }

  void Request::
  setEnable_breakpoint (::std::unique_ptr< Enable_breakpointType > x)
  {
    this->enable_breakpoint_.set (std::move (x));
  }

  const Request::Disable_breakpointOptional& Request::
  getDisable_breakpoint () const
  {
    return this->disable_breakpoint_;
  }

  Request::Disable_breakpointOptional& Request::
  getDisable_breakpoint ()
  {
    return this->disable_breakpoint_;
  }

  void Request::
  setDisable_breakpoint (const Disable_breakpointType& x)
  {
    this->disable_breakpoint_.set (x);
  }

  void Request::
  setDisable_breakpoint (const Disable_breakpointOptional& x)
  {
    this->disable_breakpoint_ = x;
  }

  void Request::
  setDisable_breakpoint (::std::unique_ptr< Disable_breakpointType > x)
  {
    this->disable_breakpoint_.set (std::move (x));
  }

  const Request::Delete_breakpointOptional& Request::
  getDelete_breakpoint () const
  {
    return this->delete_breakpoint_;
  }

  Request::Delete_breakpointOptional& Request::
  getDelete_breakpoint ()
  {
    return this->delete_breakpoint_;
  }

  void Request::
  setDelete_breakpoint (const Delete_breakpointType& x)
  {
    this->delete_breakpoint_.set (x);
  }

  void Request::
  setDelete_breakpoint (const Delete_breakpointOptional& x)
  {
    this->delete_breakpoint_ = x;
  }

  void Request::
  setDelete_breakpoint (::std::unique_ptr< Delete_breakpointType > x)
  {
    this->delete_breakpoint_.set (std::move (x));
  }

  const Request::Set_variableOptional& Request::
  getSet_variable () const
  {
    return this->set_variable_;
  }

  Request::Set_variableOptional& Request::
  getSet_variable ()
  {
    return this->set_variable_;
  }

  void Request::
  setSet_variable (const Set_variableType& x)
  {
    this->set_variable_.set (x);
  }

  void Request::
  setSet_variable (const Set_variableOptional& x)
  {
    this->set_variable_ = x;
  }

  void Request::
  setSet_variable (::std::unique_ptr< Set_variableType > x)
  {
    this->set_variable_.set (std::move (x));
  }

  const Request::Eengine_event_setupOptional& Request::
  getEengine_event_setup () const
  {
    return this->eengine_event_setup_;
  }

  Request::Eengine_event_setupOptional& Request::
  getEengine_event_setup ()
  {
    return this->eengine_event_setup_;
  }

  void Request::
  setEengine_event_setup (const Eengine_event_setupType& x)
  {
    this->eengine_event_setup_.set (x);
  }

  void Request::
  setEengine_event_setup (const Eengine_event_setupOptional& x)
  {
    this->eengine_event_setup_ = x;
  }

  void Request::
  setEengine_event_setup (::std::unique_ptr< Eengine_event_setupType > x)
  {
    this->eengine_event_setup_.set (std::move (x));
  }

  const Request::IdType& Request::
  getId () const
  {
    return this->id_.get ();
  }

  Request::IdType& Request::
  getId ()
  {
    return this->id_.get ();
  }

  void Request::
  setId (const IdType& x)
  {
    this->id_.set (x);
  }

  void Request::
  setId (::std::unique_ptr< IdType > x)
  {
    this->id_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace poosl
{
  // T_load_request
  //

  T_load_request::
  T_load_request ()
  : ::xml_schema::Type (),
    filename_ (this)
  {
  }

  T_load_request::
  T_load_request (const FilenameType& filename)
  : ::xml_schema::Type (),
    filename_ (filename, this)
  {
  }

  T_load_request::
  T_load_request (const T_load_request& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    filename_ (x.filename_, f, this)
  {
  }

  T_load_request::
  T_load_request (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    filename_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_load_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filename" && n.namespace_ ().empty ())
      {
        this->filename_.set (FilenameTraits::create (i, f, this));
        continue;
      }
    }

    if (!filename_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "filename",
        "");
    }
  }

  T_load_request* T_load_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_load_request (*this, f, c);
  }

  T_load_request& T_load_request::
  operator= (const T_load_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->filename_ = x.filename_;
    }

    return *this;
  }

  T_load_request::
  ~T_load_request ()
  {
  }

  // T_save_request
  //

  T_save_request::
  T_save_request ()
  : ::xml_schema::Type (),
    filename_ (this),
    string_ (this)
  {
  }

  T_save_request::
  T_save_request (const FilenameType& filename,
                  const StringType& string)
  : ::xml_schema::Type (),
    filename_ (filename, this),
    string_ (string, this)
  {
  }

  T_save_request::
  T_save_request (const T_save_request& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    filename_ (x.filename_, f, this),
    string_ (x.string_, f, this)
  {
  }

  T_save_request::
  T_save_request (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    filename_ (this),
    string_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_save_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // filename
      //
      if (n.name () == "filename" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< FilenameType > r (
          FilenameTraits::create (i, f, this));

        if (!filename_.present ())
        {
          this->filename_.set (::std::move (r));
          continue;
        }
      }

      // string
      //
      if (n.name () == "string" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< StringType > r (
          StringTraits::create (i, f, this));

        if (!string_.present ())
        {
          this->string_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!filename_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "filename",
        "uri:poosl");
    }

    if (!string_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "string",
        "uri:poosl");
    }
  }

  T_save_request* T_save_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_save_request (*this, f, c);
  }

  T_save_request& T_save_request::
  operator= (const T_save_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->filename_ = x.filename_;
      this->string_ = x.string_;
    }

    return *this;
  }

  T_save_request::
  ~T_save_request ()
  {
  }

  // T_serialize_request
  //

  T_serialize_request::
  T_serialize_request ()
  : ::xml_schema::Type (),
    handle_ (this)
  {
  }

  T_serialize_request::
  T_serialize_request (const HandleType& handle)
  : ::xml_schema::Type (),
    handle_ (handle, this)
  {
  }

  T_serialize_request::
  T_serialize_request (const T_serialize_request& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    handle_ (x.handle_, f, this)
  {
  }

  T_serialize_request::
  T_serialize_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_serialize_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // handle
      //
      if (n.name () == "handle" && n.namespace_ () == "uri:poosl")
      {
        if (!handle_.present ())
        {
          this->handle_.set (HandleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "handle",
        "uri:poosl");
    }
  }

  T_serialize_request* T_serialize_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_serialize_request (*this, f, c);
  }

  T_serialize_request& T_serialize_request::
  operator= (const T_serialize_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->handle_ = x.handle_;
    }

    return *this;
  }

  T_serialize_request::
  ~T_serialize_request ()
  {
  }

  // T_deserialize_request
  //

  T_deserialize_request::
  T_deserialize_request ()
  : ::xml_schema::Type (),
    poosl_specification_ (this),
    cluster_class_ (this),
    process_class_ (this),
    data_class_ (this),
    initial_method_call_ (this),
    process_method_ (this),
    data_method_ (this),
    expression_ (this)
  {
  }

  T_deserialize_request::
  T_deserialize_request (const T_deserialize_request& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    poosl_specification_ (x.poosl_specification_, f, this),
    cluster_class_ (x.cluster_class_, f, this),
    process_class_ (x.process_class_, f, this),
    data_class_ (x.data_class_, f, this),
    initial_method_call_ (x.initial_method_call_, f, this),
    process_method_ (x.process_method_, f, this),
    data_method_ (x.data_method_, f, this),
    expression_ (x.expression_, f, this)
  {
  }

  T_deserialize_request::
  T_deserialize_request (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    poosl_specification_ (this),
    cluster_class_ (this),
    process_class_ (this),
    data_class_ (this),
    initial_method_call_ (this),
    process_method_ (this),
    data_method_ (this),
    expression_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_deserialize_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // poosl_specification
      //
      if (n.name () == "poosl_specification" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Poosl_specificationType > r (
          Poosl_specificationTraits::create (i, f, this));

        if (!this->poosl_specification_)
        {
          this->poosl_specification_.set (::std::move (r));
          continue;
        }
      }

      // cluster_class
      //
      if (n.name () == "cluster_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Cluster_classType > r (
          Cluster_classTraits::create (i, f, this));

        if (!this->cluster_class_)
        {
          this->cluster_class_.set (::std::move (r));
          continue;
        }
      }

      // process_class
      //
      if (n.name () == "process_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Process_classType > r (
          Process_classTraits::create (i, f, this));

        if (!this->process_class_)
        {
          this->process_class_.set (::std::move (r));
          continue;
        }
      }

      // data_class
      //
      if (n.name () == "data_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Data_classType > r (
          Data_classTraits::create (i, f, this));

        if (!this->data_class_)
        {
          this->data_class_.set (::std::move (r));
          continue;
        }
      }

      // initial_method_call
      //
      if (n.name () == "initial_method_call" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Initial_method_callType > r (
          Initial_method_callTraits::create (i, f, this));

        if (!this->initial_method_call_)
        {
          this->initial_method_call_.set (::std::move (r));
          continue;
        }
      }

      // process_method
      //
      if (n.name () == "process_method" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Process_methodType > r (
          Process_methodTraits::create (i, f, this));

        if (!this->process_method_)
        {
          this->process_method_.set (::std::move (r));
          continue;
        }
      }

      // data_method
      //
      if (n.name () == "data_method" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Data_methodType > r (
          Data_methodTraits::create (i, f, this));

        if (!this->data_method_)
        {
          this->data_method_.set (::std::move (r));
          continue;
        }
      }

      // expression
      //
      if (n.name () == "expression" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< ExpressionType > r (
          ExpressionTraits::create (i, f, this));

        if (!this->expression_)
        {
          this->expression_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  T_deserialize_request* T_deserialize_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_deserialize_request (*this, f, c);
  }

  T_deserialize_request& T_deserialize_request::
  operator= (const T_deserialize_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->poosl_specification_ = x.poosl_specification_;
      this->cluster_class_ = x.cluster_class_;
      this->process_class_ = x.process_class_;
      this->data_class_ = x.data_class_;
      this->initial_method_call_ = x.initial_method_call_;
      this->process_method_ = x.process_method_;
      this->data_method_ = x.data_method_;
      this->expression_ = x.expression_;
    }

    return *this;
  }

  T_deserialize_request::
  ~T_deserialize_request ()
  {
  }

  // T_compile_request
  //

  T_compile_request::
  T_compile_request ()
  : ::xml_schema::Type (),
    basic_classes_ (this),
    poosl_specification_ (this),
    cluster_class_ (this),
    process_class_ (this),
    data_class_ (this),
    initial_method_call_ (this),
    process_method_ (this),
    data_method_ (this),
    expression_ (this)
  {
  }

  T_compile_request::
  T_compile_request (const T_compile_request& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    basic_classes_ (x.basic_classes_, f, this),
    poosl_specification_ (x.poosl_specification_, f, this),
    cluster_class_ (x.cluster_class_, f, this),
    process_class_ (x.process_class_, f, this),
    data_class_ (x.data_class_, f, this),
    initial_method_call_ (x.initial_method_call_, f, this),
    process_method_ (x.process_method_, f, this),
    data_method_ (x.data_method_, f, this),
    expression_ (x.expression_, f, this)
  {
  }

  T_compile_request::
  T_compile_request (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    basic_classes_ (this),
    poosl_specification_ (this),
    cluster_class_ (this),
    process_class_ (this),
    data_class_ (this),
    initial_method_call_ (this),
    process_method_ (this),
    data_method_ (this),
    expression_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_compile_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // basic_classes
      //
      if (n.name () == "basic_classes" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Basic_classesType > r (
          Basic_classesTraits::create (i, f, this));

        if (!this->basic_classes_)
        {
          this->basic_classes_.set (::std::move (r));
          continue;
        }
      }

      // poosl_specification
      //
      if (n.name () == "poosl_specification" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Poosl_specificationType > r (
          Poosl_specificationTraits::create (i, f, this));

        if (!this->poosl_specification_)
        {
          this->poosl_specification_.set (::std::move (r));
          continue;
        }
      }

      // cluster_class
      //
      if (n.name () == "cluster_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Cluster_classType > r (
          Cluster_classTraits::create (i, f, this));

        if (!this->cluster_class_)
        {
          this->cluster_class_.set (::std::move (r));
          continue;
        }
      }

      // process_class
      //
      if (n.name () == "process_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Process_classType > r (
          Process_classTraits::create (i, f, this));

        if (!this->process_class_)
        {
          this->process_class_.set (::std::move (r));
          continue;
        }
      }

      // data_class
      //
      if (n.name () == "data_class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Data_classType > r (
          Data_classTraits::create (i, f, this));

        if (!this->data_class_)
        {
          this->data_class_.set (::std::move (r));
          continue;
        }
      }

      // initial_method_call
      //
      if (n.name () == "initial_method_call" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Initial_method_callType > r (
          Initial_method_callTraits::create (i, f, this));

        if (!this->initial_method_call_)
        {
          this->initial_method_call_.set (::std::move (r));
          continue;
        }
      }

      // process_method
      //
      if (n.name () == "process_method" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Process_methodType > r (
          Process_methodTraits::create (i, f, this));

        if (!this->process_method_)
        {
          this->process_method_.set (::std::move (r));
          continue;
        }
      }

      // data_method
      //
      if (n.name () == "data_method" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Data_methodType > r (
          Data_methodTraits::create (i, f, this));

        if (!this->data_method_)
        {
          this->data_method_.set (::std::move (r));
          continue;
        }
      }

      // expression
      //
      if (n.name () == "expression" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< ExpressionType > r (
          ExpressionTraits::create (i, f, this));

        if (!this->expression_)
        {
          this->expression_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  T_compile_request* T_compile_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_compile_request (*this, f, c);
  }

  T_compile_request& T_compile_request::
  operator= (const T_compile_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->basic_classes_ = x.basic_classes_;
      this->poosl_specification_ = x.poosl_specification_;
      this->cluster_class_ = x.cluster_class_;
      this->process_class_ = x.process_class_;
      this->data_class_ = x.data_class_;
      this->initial_method_call_ = x.initial_method_call_;
      this->process_method_ = x.process_method_;
      this->data_method_ = x.data_method_;
      this->expression_ = x.expression_;
    }

    return *this;
  }

  T_compile_request::
  ~T_compile_request ()
  {
  }

  // T_list_classes_request
  //

  T_list_classes_request::
  T_list_classes_request ()
  : ::xml_schema::Type ()
  {
  }

  T_list_classes_request::
  T_list_classes_request (const T_list_classes_request& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  T_list_classes_request::
  T_list_classes_request (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  T_list_classes_request::
  T_list_classes_request (const ::xercesc::DOMAttr& a,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  T_list_classes_request::
  T_list_classes_request (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  T_list_classes_request* T_list_classes_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_list_classes_request (*this, f, c);
  }

  T_list_classes_request::
  ~T_list_classes_request ()
  {
  }

  // T_get_top_level_specification_request
  //

  T_get_top_level_specification_request::
  T_get_top_level_specification_request ()
  : ::xml_schema::Type ()
  {
  }

  T_get_top_level_specification_request::
  T_get_top_level_specification_request (const T_get_top_level_specification_request& x,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  T_get_top_level_specification_request::
  T_get_top_level_specification_request (const ::xercesc::DOMElement& e,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  T_get_top_level_specification_request::
  T_get_top_level_specification_request (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  T_get_top_level_specification_request::
  T_get_top_level_specification_request (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  T_get_top_level_specification_request* T_get_top_level_specification_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_top_level_specification_request (*this, f, c);
  }

  T_get_top_level_specification_request::
  ~T_get_top_level_specification_request ()
  {
  }

  // T_get_class_definition_request
  //

  T_get_class_definition_request::
  T_get_class_definition_request ()
  : ::xml_schema::Type (),
    class__ (this)
  {
  }

  T_get_class_definition_request::
  T_get_class_definition_request (const ClassType& class_)
  : ::xml_schema::Type (),
    class__ (class_, this)
  {
  }

  T_get_class_definition_request::
  T_get_class_definition_request (const T_get_class_definition_request& x,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    class__ (x.class__, f, this)
  {
  }

  T_get_class_definition_request::
  T_get_class_definition_request (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    class__ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_get_class_definition_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // class
      //
      if (n.name () == "class" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< ClassType > r (
          ClassTraits::create (i, f, this));

        if (!class__.present ())
        {
          this->class__.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!class__.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "class",
        "uri:poosl");
    }
  }

  T_get_class_definition_request* T_get_class_definition_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_class_definition_request (*this, f, c);
  }

  T_get_class_definition_request& T_get_class_definition_request::
  operator= (const T_get_class_definition_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->class__ = x.class__;
    }

    return *this;
  }

  T_get_class_definition_request::
  ~T_get_class_definition_request ()
  {
  }

  // T_get_method_definition_request
  //

  T_get_method_definition_request::
  T_get_method_definition_request ()
  : ::xml_schema::Type (),
    method_ (this)
  {
  }

  T_get_method_definition_request::
  T_get_method_definition_request (const MethodType& method)
  : ::xml_schema::Type (),
    method_ (method, this)
  {
  }

  T_get_method_definition_request::
  T_get_method_definition_request (const T_get_method_definition_request& x,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    method_ (x.method_, f, this)
  {
  }

  T_get_method_definition_request::
  T_get_method_definition_request (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    method_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_get_method_definition_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // method
      //
      if (n.name () == "method" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< MethodType > r (
          MethodTraits::create (i, f, this));

        if (!method_.present ())
        {
          this->method_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!method_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "method",
        "uri:poosl");
    }
  }

  T_get_method_definition_request* T_get_method_definition_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_method_definition_request (*this, f, c);
  }

  T_get_method_definition_request& T_get_method_definition_request::
  operator= (const T_get_method_definition_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->method_ = x.method_;
    }

    return *this;
  }

  T_get_method_definition_request::
  ~T_get_method_definition_request ()
  {
  }

  // T_get_object_handle_request
  //

  T_get_object_handle_request::
  T_get_object_handle_request ()
  : ::xml_schema::Type (),
    name_ (this),
    type_ (this)
  {
  }

  T_get_object_handle_request::
  T_get_object_handle_request (const NameType& name,
                               const TypeType& type)
  : ::xml_schema::Type (),
    name_ (name, this),
    type_ (type, this)
  {
  }

  T_get_object_handle_request::
  T_get_object_handle_request (const T_get_object_handle_request& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    type_ (x.type_, f, this)
  {
  }

  T_get_object_handle_request::
  T_get_object_handle_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (this),
    type_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_get_object_handle_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< TypeType > r (
          TypeTraits::create (i, f, this));

        if (!type_.present ())
        {
          this->type_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "uri:poosl");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "uri:poosl");
    }
  }

  T_get_object_handle_request* T_get_object_handle_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_object_handle_request (*this, f, c);
  }

  T_get_object_handle_request& T_get_object_handle_request::
  operator= (const T_get_object_handle_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->name_ = x.name_;
      this->type_ = x.type_;
    }

    return *this;
  }

  T_get_object_handle_request::
  ~T_get_object_handle_request ()
  {
  }

  // T_rename_object_request
  //

  T_rename_object_request::
  T_rename_object_request ()
  : ::xml_schema::Type (),
    handle_ (this),
    new_name_ (this)
  {
  }

  T_rename_object_request::
  T_rename_object_request (const HandleType& handle,
                           const New_nameType& new_name)
  : ::xml_schema::Type (),
    handle_ (handle, this),
    new_name_ (new_name, this)
  {
  }

  T_rename_object_request::
  T_rename_object_request (const T_rename_object_request& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    handle_ (x.handle_, f, this),
    new_name_ (x.new_name_, f, this)
  {
  }

  T_rename_object_request::
  T_rename_object_request (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    handle_ (this),
    new_name_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_rename_object_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // handle
      //
      if (n.name () == "handle" && n.namespace_ () == "uri:poosl")
      {
        if (!handle_.present ())
        {
          this->handle_.set (HandleTraits::create (i, f, this));
          continue;
        }
      }

      // new_name
      //
      if (n.name () == "new_name" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< New_nameType > r (
          New_nameTraits::create (i, f, this));

        if (!new_name_.present ())
        {
          this->new_name_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "handle",
        "uri:poosl");
    }

    if (!new_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "new_name",
        "uri:poosl");
    }
  }

  T_rename_object_request* T_rename_object_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_rename_object_request (*this, f, c);
  }

  T_rename_object_request& T_rename_object_request::
  operator= (const T_rename_object_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->handle_ = x.handle_;
      this->new_name_ = x.new_name_;
    }

    return *this;
  }

  T_rename_object_request::
  ~T_rename_object_request ()
  {
  }

  // T_insert_object_request
  //

  T_insert_object_request::
  T_insert_object_request ()
  : ::xml_schema::Type (),
    owner_ (this),
    property_ (this),
    value_ (this)
  {
  }

  T_insert_object_request::
  T_insert_object_request (const OwnerType& owner,
                           const PropertyType& property,
                           const ValueType& value)
  : ::xml_schema::Type (),
    owner_ (owner, this),
    property_ (property, this),
    value_ (value, this)
  {
  }

  T_insert_object_request::
  T_insert_object_request (const T_insert_object_request& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    owner_ (x.owner_, f, this),
    property_ (x.property_, f, this),
    value_ (x.value_, f, this)
  {
  }

  T_insert_object_request::
  T_insert_object_request (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    owner_ (this),
    property_ (this),
    value_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_insert_object_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // owner
      //
      if (n.name () == "owner" && n.namespace_ () == "uri:poosl")
      {
        if (!owner_.present ())
        {
          this->owner_.set (OwnerTraits::create (i, f, this));
          continue;
        }
      }

      // property
      //
      if (n.name () == "property" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< PropertyType > r (
          PropertyTraits::create (i, f, this));

        if (!property_.present ())
        {
          this->property_.set (::std::move (r));
          continue;
        }
      }

      // value
      //
      if (n.name () == "value" && n.namespace_ () == "uri:poosl")
      {
        if (!value_.present ())
        {
          this->value_.set (ValueTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!owner_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "owner",
        "uri:poosl");
    }

    if (!property_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "property",
        "uri:poosl");
    }

    if (!value_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "value",
        "uri:poosl");
    }
  }

  T_insert_object_request* T_insert_object_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_insert_object_request (*this, f, c);
  }

  T_insert_object_request& T_insert_object_request::
  operator= (const T_insert_object_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->owner_ = x.owner_;
      this->property_ = x.property_;
      this->value_ = x.value_;
    }

    return *this;
  }

  T_insert_object_request::
  ~T_insert_object_request ()
  {
  }

  // T_delete_object_request
  //

  T_delete_object_request::
  T_delete_object_request ()
  : ::xml_schema::Type (),
    object_ (this)
  {
  }

  T_delete_object_request::
  T_delete_object_request (const T_delete_object_request& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    object_ (x.object_, f, this)
  {
  }

  T_delete_object_request::
  T_delete_object_request (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    object_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_delete_object_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // object
      //
      if (n.name () == "object" && n.namespace_ () == "uri:poosl")
      {
        this->object_.push_back (ObjectTraits::create (i, f, this));
        continue;
      }

      break;
    }
  }

  T_delete_object_request* T_delete_object_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_delete_object_request (*this, f, c);
  }

  T_delete_object_request& T_delete_object_request::
  operator= (const T_delete_object_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->object_ = x.object_;
    }

    return *this;
  }

  T_delete_object_request::
  ~T_delete_object_request ()
  {
  }

  // T_instantiate_request
  //

  T_instantiate_request::
  T_instantiate_request ()
  : ::xml_schema::Type (),
    poosl_specification_ (this)
  {
  }

  T_instantiate_request::
  T_instantiate_request (const Poosl_specificationType& poosl_specification)
  : ::xml_schema::Type (),
    poosl_specification_ (poosl_specification, this)
  {
  }

  T_instantiate_request::
  T_instantiate_request (const T_instantiate_request& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    poosl_specification_ (x.poosl_specification_, f, this)
  {
  }

  T_instantiate_request::
  T_instantiate_request (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    poosl_specification_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_instantiate_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // poosl_specification
      //
      if (n.name () == "poosl_specification" && n.namespace_ () == "uri:poosl")
      {
        if (!poosl_specification_.present ())
        {
          this->poosl_specification_.set (Poosl_specificationTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!poosl_specification_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "poosl_specification",
        "uri:poosl");
    }
  }

  T_instantiate_request* T_instantiate_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_instantiate_request (*this, f, c);
  }

  T_instantiate_request& T_instantiate_request::
  operator= (const T_instantiate_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->poosl_specification_ = x.poosl_specification_;
    }

    return *this;
  }

  T_instantiate_request::
  ~T_instantiate_request ()
  {
  }

  // T_list_files_request
  //

  T_list_files_request::
  T_list_files_request ()
  : ::xml_schema::Type (),
    poosl_specification_ (this)
  {
  }

  T_list_files_request::
  T_list_files_request (const Poosl_specificationType& poosl_specification)
  : ::xml_schema::Type (),
    poosl_specification_ (poosl_specification, this)
  {
  }

  T_list_files_request::
  T_list_files_request (const T_list_files_request& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    poosl_specification_ (x.poosl_specification_, f, this)
  {
  }

  T_list_files_request::
  T_list_files_request (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    poosl_specification_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_list_files_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // poosl_specification
      //
      if (n.name () == "poosl_specification" && n.namespace_ () == "uri:poosl")
      {
        if (!poosl_specification_.present ())
        {
          this->poosl_specification_.set (Poosl_specificationTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!poosl_specification_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "poosl_specification",
        "uri:poosl");
    }
  }

  T_list_files_request* T_list_files_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_list_files_request (*this, f, c);
  }

  T_list_files_request& T_list_files_request::
  operator= (const T_list_files_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->poosl_specification_ = x.poosl_specification_;
    }

    return *this;
  }

  T_list_files_request::
  ~T_list_files_request ()
  {
  }

  // T_get_position_request
  //

  T_get_position_request::
  T_get_position_request ()
  : ::xml_schema::Type (),
    stmt_handle_ (this)
  {
  }

  T_get_position_request::
  T_get_position_request (const Stmt_handleType& stmt_handle)
  : ::xml_schema::Type (),
    stmt_handle_ (stmt_handle, this)
  {
  }

  T_get_position_request::
  T_get_position_request (const T_get_position_request& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    stmt_handle_ (x.stmt_handle_, f, this)
  {
  }

  T_get_position_request::
  T_get_position_request (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    stmt_handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_get_position_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // stmt_handle
      //
      if (n.name () == "stmt_handle" && n.namespace_ () == "uri:poosl")
      {
        if (!stmt_handle_.present ())
        {
          this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!stmt_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "stmt_handle",
        "uri:poosl");
    }
  }

  T_get_position_request* T_get_position_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_position_request (*this, f, c);
  }

  T_get_position_request& T_get_position_request::
  operator= (const T_get_position_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->stmt_handle_ = x.stmt_handle_;
    }

    return *this;
  }

  T_get_position_request::
  ~T_get_position_request ()
  {
  }

  // T_command_request
  //

  T_command_request::
  T_command_request ()
  : ::xml_schema::Type (),
    type_ (this)
  {
  }

  T_command_request::
  T_command_request (const T_command_request& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    type_ (x.type_, f, this)
  {
  }

  T_command_request::
  T_command_request (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    type_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_command_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        this->type_.set (TypeTraits::create (i, f, this));
        continue;
      }
    }
  }

  T_command_request* T_command_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_command_request (*this, f, c);
  }

  T_command_request& T_command_request::
  operator= (const T_command_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->type_ = x.type_;
    }

    return *this;
  }

  T_command_request::
  ~T_command_request ()
  {
  }

  // T_execution_state_request
  //

  T_execution_state_request::
  T_execution_state_request ()
  : ::xml_schema::Type ()
  {
  }

  T_execution_state_request::
  T_execution_state_request (const T_execution_state_request& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  T_execution_state_request::
  T_execution_state_request (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  T_execution_state_request::
  T_execution_state_request (const ::xercesc::DOMAttr& a,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  T_execution_state_request::
  T_execution_state_request (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  T_execution_state_request* T_execution_state_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_execution_state_request (*this, f, c);
  }

  T_execution_state_request::
  ~T_execution_state_request ()
  {
  }

  // T_get_transitions_request
  //

  T_get_transitions_request::
  T_get_transitions_request ()
  : ::xml_schema::Type ()
  {
  }

  T_get_transitions_request::
  T_get_transitions_request (const T_get_transitions_request& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  T_get_transitions_request::
  T_get_transitions_request (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  T_get_transitions_request::
  T_get_transitions_request (const ::xercesc::DOMAttr& a,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  T_get_transitions_request::
  T_get_transitions_request (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  T_get_transitions_request* T_get_transitions_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_get_transitions_request (*this, f, c);
  }

  T_get_transitions_request::
  ~T_get_transitions_request ()
  {
  }

  // T_perform_transition_request
  //

  T_perform_transition_request::
  T_perform_transition_request ()
  : ::xml_schema::Type (),
    handle_ (this),
    data_debug_ (this)
  {
  }

  T_perform_transition_request::
  T_perform_transition_request (const HandleType& handle)
  : ::xml_schema::Type (),
    handle_ (handle, this),
    data_debug_ (this)
  {
  }

  T_perform_transition_request::
  T_perform_transition_request (const T_perform_transition_request& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    handle_ (x.handle_, f, this),
    data_debug_ (x.data_debug_, f, this)
  {
  }

  T_perform_transition_request::
  T_perform_transition_request (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    handle_ (this),
    data_debug_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void T_perform_transition_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // handle
      //
      if (n.name () == "handle" && n.namespace_ () == "uri:poosl")
      {
        if (!handle_.present ())
        {
          this->handle_.set (HandleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "handle",
        "uri:poosl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "data_debug" && n.namespace_ ().empty ())
      {
        this->data_debug_.set (Data_debugTraits::create (i, f, this));
        continue;
      }
    }
  }

  T_perform_transition_request* T_perform_transition_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_perform_transition_request (*this, f, c);
  }

  T_perform_transition_request& T_perform_transition_request::
  operator= (const T_perform_transition_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->handle_ = x.handle_;
      this->data_debug_ = x.data_debug_;
    }

    return *this;
  }

  T_perform_transition_request::
  ~T_perform_transition_request ()
  {
  }

  // T_perform_process_step_request
  //

  T_perform_process_step_request::
  T_perform_process_step_request ()
  : ::xml_schema::Type (),
    process_path_ (this)
  {
  }

  T_perform_process_step_request::
  T_perform_process_step_request (const Process_pathType& process_path)
  : ::xml_schema::Type (),
    process_path_ (process_path, this)
  {
  }

  T_perform_process_step_request::
  T_perform_process_step_request (const T_perform_process_step_request& x,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    process_path_ (x.process_path_, f, this)
  {
  }

  T_perform_process_step_request::
  T_perform_process_step_request (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    process_path_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_perform_process_step_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // process_path
      //
      if (n.name () == "process_path" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Process_pathType > r (
          Process_pathTraits::create (i, f, this));

        if (!process_path_.present ())
        {
          this->process_path_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!process_path_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "process_path",
        "uri:poosl");
    }
  }

  T_perform_process_step_request* T_perform_process_step_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_perform_process_step_request (*this, f, c);
  }

  T_perform_process_step_request& T_perform_process_step_request::
  operator= (const T_perform_process_step_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->process_path_ = x.process_path_;
    }

    return *this;
  }

  T_perform_process_step_request::
  ~T_perform_process_step_request ()
  {
  }

  // T_inspect_request
  //

  T_inspect_request::
  T_inspect_request ()
  : ::xml_schema::Type (),
    name_ (this),
    type_ (this),
    handle_ (this)
  {
  }

  T_inspect_request::
  T_inspect_request (const T_inspect_request& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    type_ (x.type_, f, this),
    handle_ (x.handle_, f, this)
  {
  }

  T_inspect_request::
  T_inspect_request (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (this),
    type_ (this),
    handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_inspect_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!this->name_)
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< TypeType > r (
          TypeTraits::create (i, f, this));

        if (!this->type_)
        {
          this->type_.set (::std::move (r));
          continue;
        }
      }

      // handle
      //
      if (n.name () == "handle" && n.namespace_ () == "uri:poosl")
      {
        if (!this->handle_)
        {
          this->handle_.set (HandleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  T_inspect_request* T_inspect_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_inspect_request (*this, f, c);
  }

  T_inspect_request& T_inspect_request::
  operator= (const T_inspect_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->name_ = x.name_;
      this->type_ = x.type_;
      this->handle_ = x.handle_;
    }

    return *this;
  }

  T_inspect_request::
  ~T_inspect_request ()
  {
  }

  // T_observe_request
  //

  T_observe_request::
  T_observe_request ()
  : ::xml_schema::Type (),
    type_ (this),
    handle_ (this)
  {
  }

  T_observe_request::
  T_observe_request (const TypeType& type,
                     const HandleType& handle)
  : ::xml_schema::Type (),
    type_ (type, this),
    handle_ (handle, this)
  {
  }

  T_observe_request::
  T_observe_request (const T_observe_request& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    type_ (x.type_, f, this),
    handle_ (x.handle_, f, this)
  {
  }

  T_observe_request::
  T_observe_request (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    type_ (this),
    handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void T_observe_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        this->type_.set (TypeTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "handle" && n.namespace_ ().empty ())
      {
        this->handle_.set (HandleTraits::create (i, f, this));
        continue;
      }
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }

    if (!handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "handle",
        "");
    }
  }

  T_observe_request* T_observe_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_observe_request (*this, f, c);
  }

  T_observe_request& T_observe_request::
  operator= (const T_observe_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->type_ = x.type_;
      this->handle_ = x.handle_;
    }

    return *this;
  }

  T_observe_request::
  ~T_observe_request ()
  {
  }

  // T_eengine_event_setup_request
  //

  T_eengine_event_setup_request::
  T_eengine_event_setup_request ()
  : ::xml_schema::Type (),
    communication_messages_enable_ (this),
    communication_messages_credits_ (this),
    communication_messages_credits_enable_ (this)
  {
  }

  T_eengine_event_setup_request::
  T_eengine_event_setup_request (const Communication_messages_enableType& communication_messages_enable,
                                 const Communication_messages_credits_enableType& communication_messages_credits_enable)
  : ::xml_schema::Type (),
    communication_messages_enable_ (communication_messages_enable, this),
    communication_messages_credits_ (this),
    communication_messages_credits_enable_ (communication_messages_credits_enable, this)
  {
  }

  T_eengine_event_setup_request::
  T_eengine_event_setup_request (const T_eengine_event_setup_request& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    communication_messages_enable_ (x.communication_messages_enable_, f, this),
    communication_messages_credits_ (x.communication_messages_credits_, f, this),
    communication_messages_credits_enable_ (x.communication_messages_credits_enable_, f, this)
  {
  }

  T_eengine_event_setup_request::
  T_eengine_event_setup_request (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    communication_messages_enable_ (this),
    communication_messages_credits_ (this),
    communication_messages_credits_enable_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_eengine_event_setup_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // communication_messages_enable
      //
      if (n.name () == "communication_messages_enable" && n.namespace_ () == "uri:poosl")
      {
        if (!communication_messages_enable_.present ())
        {
          this->communication_messages_enable_.set (Communication_messages_enableTraits::create (i, f, this));
          continue;
        }
      }

      // communication_messages_credits
      //
      if (n.name () == "communication_messages_credits" && n.namespace_ () == "uri:poosl")
      {
        if (!this->communication_messages_credits_)
        {
          this->communication_messages_credits_.set (Communication_messages_creditsTraits::create (i, f, this));
          continue;
        }
      }

      // communication_messages_credits_enable
      //
      if (n.name () == "communication_messages_credits_enable" && n.namespace_ () == "uri:poosl")
      {
        if (!communication_messages_credits_enable_.present ())
        {
          this->communication_messages_credits_enable_.set (Communication_messages_credits_enableTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!communication_messages_enable_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "communication_messages_enable",
        "uri:poosl");
    }

    if (!communication_messages_credits_enable_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "communication_messages_credits_enable",
        "uri:poosl");
    }
  }

  T_eengine_event_setup_request* T_eengine_event_setup_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_eengine_event_setup_request (*this, f, c);
  }

  T_eengine_event_setup_request& T_eengine_event_setup_request::
  operator= (const T_eengine_event_setup_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->communication_messages_enable_ = x.communication_messages_enable_;
      this->communication_messages_credits_ = x.communication_messages_credits_;
      this->communication_messages_credits_enable_ = x.communication_messages_credits_enable_;
    }

    return *this;
  }

  T_eengine_event_setup_request::
  ~T_eengine_event_setup_request ()
  {
  }

  // T_eengine_event_communication_credits_replenish
  //

  T_eengine_event_communication_credits_replenish::
  T_eengine_event_communication_credits_replenish ()
  : ::xml_schema::Type (),
    credit_ (this)
  {
  }

  T_eengine_event_communication_credits_replenish::
  T_eengine_event_communication_credits_replenish (const CreditType& credit)
  : ::xml_schema::Type (),
    credit_ (credit, this)
  {
  }

  T_eengine_event_communication_credits_replenish::
  T_eengine_event_communication_credits_replenish (const T_eengine_event_communication_credits_replenish& x,
                                                   ::xml_schema::Flags f,
                                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    credit_ (x.credit_, f, this)
  {
  }

  T_eengine_event_communication_credits_replenish::
  T_eengine_event_communication_credits_replenish (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::Flags f,
                                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    credit_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_eengine_event_communication_credits_replenish::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // credit
      //
      if (n.name () == "credit" && n.namespace_ () == "uri:poosl")
      {
        if (!credit_.present ())
        {
          this->credit_.set (CreditTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!credit_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "credit",
        "uri:poosl");
    }
  }

  T_eengine_event_communication_credits_replenish* T_eengine_event_communication_credits_replenish::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_eengine_event_communication_credits_replenish (*this, f, c);
  }

  T_eengine_event_communication_credits_replenish& T_eengine_event_communication_credits_replenish::
  operator= (const T_eengine_event_communication_credits_replenish& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->credit_ = x.credit_;
    }

    return *this;
  }

  T_eengine_event_communication_credits_replenish::
  ~T_eengine_event_communication_credits_replenish ()
  {
  }

  // T_create_breakpoint_request
  //

  T_create_breakpoint_request::
  T_create_breakpoint_request ()
  : ::xml_schema::Type (),
    name_ (this),
    control_point_ (this),
    stmt_handle_ (this),
    position_ (this)
  {
  }

  T_create_breakpoint_request::
  T_create_breakpoint_request (const T_create_breakpoint_request& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    control_point_ (x.control_point_, f, this),
    stmt_handle_ (x.stmt_handle_, f, this),
    position_ (x.position_, f, this)
  {
  }

  T_create_breakpoint_request::
  T_create_breakpoint_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (this),
    control_point_ (this),
    stmt_handle_ (this),
    position_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_create_breakpoint_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!this->name_)
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // control_point
      //
      if (n.name () == "control_point" && n.namespace_ () == "uri:poosl")
      {
        if (!this->control_point_)
        {
          this->control_point_.set (Control_pointTraits::create (i, f, this));
          continue;
        }
      }

      // stmt_handle
      //
      if (n.name () == "stmt_handle" && n.namespace_ () == "uri:poosl")
      {
        if (!this->stmt_handle_)
        {
          this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
          continue;
        }
      }

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< PositionType > r (
          PositionTraits::create (i, f, this));

        if (!this->position_)
        {
          this->position_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  T_create_breakpoint_request* T_create_breakpoint_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_create_breakpoint_request (*this, f, c);
  }

  T_create_breakpoint_request& T_create_breakpoint_request::
  operator= (const T_create_breakpoint_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->name_ = x.name_;
      this->control_point_ = x.control_point_;
      this->stmt_handle_ = x.stmt_handle_;
      this->position_ = x.position_;
    }

    return *this;
  }

  T_create_breakpoint_request::
  ~T_create_breakpoint_request ()
  {
  }

  // T_set_breakpoint_condition_request
  //

  T_set_breakpoint_condition_request::
  T_set_breakpoint_condition_request ()
  : ::xml_schema::Type (),
    breakpoint_id_ (this),
    condition_ (this)
  {
  }

  T_set_breakpoint_condition_request::
  T_set_breakpoint_condition_request (const Breakpoint_idType& breakpoint_id,
                                      const ConditionType& condition)
  : ::xml_schema::Type (),
    breakpoint_id_ (breakpoint_id, this),
    condition_ (condition, this)
  {
  }

  T_set_breakpoint_condition_request::
  T_set_breakpoint_condition_request (const Breakpoint_idType& breakpoint_id,
                                      ::std::unique_ptr< ConditionType > condition)
  : ::xml_schema::Type (),
    breakpoint_id_ (breakpoint_id, this),
    condition_ (std::move (condition), this)
  {
  }

  T_set_breakpoint_condition_request::
  T_set_breakpoint_condition_request (const T_set_breakpoint_condition_request& x,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    breakpoint_id_ (x.breakpoint_id_, f, this),
    condition_ (x.condition_, f, this)
  {
  }

  T_set_breakpoint_condition_request::
  T_set_breakpoint_condition_request (const ::xercesc::DOMElement& e,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    breakpoint_id_ (this),
    condition_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_set_breakpoint_condition_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // breakpoint_id
      //
      if (n.name () == "breakpoint_id" && n.namespace_ () == "uri:poosl")
      {
        if (!breakpoint_id_.present ())
        {
          this->breakpoint_id_.set (Breakpoint_idTraits::create (i, f, this));
          continue;
        }
      }

      // condition
      //
      if (n.name () == "condition" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< ConditionType > r (
          ConditionTraits::create (i, f, this));

        if (!condition_.present ())
        {
          this->condition_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!breakpoint_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breakpoint_id",
        "uri:poosl");
    }

    if (!condition_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "condition",
        "uri:poosl");
    }
  }

  T_set_breakpoint_condition_request* T_set_breakpoint_condition_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_set_breakpoint_condition_request (*this, f, c);
  }

  T_set_breakpoint_condition_request& T_set_breakpoint_condition_request::
  operator= (const T_set_breakpoint_condition_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->breakpoint_id_ = x.breakpoint_id_;
      this->condition_ = x.condition_;
    }

    return *this;
  }

  T_set_breakpoint_condition_request::
  ~T_set_breakpoint_condition_request ()
  {
  }

  // T_enable_breakpoint_request
  //

  T_enable_breakpoint_request::
  T_enable_breakpoint_request ()
  : ::xml_schema::Type (),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
  }

  T_enable_breakpoint_request::
  T_enable_breakpoint_request (const Breakpoint_idType& breakpoint_id,
                               const Control_pointType& control_point,
                               const Stmt_handleType& stmt_handle)
  : ::xml_schema::Type (),
    breakpoint_id_ (breakpoint_id, this),
    control_point_ (control_point, this),
    stmt_handle_ (stmt_handle, this)
  {
  }

  T_enable_breakpoint_request::
  T_enable_breakpoint_request (const T_enable_breakpoint_request& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    breakpoint_id_ (x.breakpoint_id_, f, this),
    control_point_ (x.control_point_, f, this),
    stmt_handle_ (x.stmt_handle_, f, this)
  {
  }

  T_enable_breakpoint_request::
  T_enable_breakpoint_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_enable_breakpoint_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // breakpoint_id
      //
      if (n.name () == "breakpoint_id" && n.namespace_ () == "uri:poosl")
      {
        if (!breakpoint_id_.present ())
        {
          this->breakpoint_id_.set (Breakpoint_idTraits::create (i, f, this));
          continue;
        }
      }

      // control_point
      //
      if (n.name () == "control_point" && n.namespace_ () == "uri:poosl")
      {
        if (!control_point_.present ())
        {
          this->control_point_.set (Control_pointTraits::create (i, f, this));
          continue;
        }
      }

      // stmt_handle
      //
      if (n.name () == "stmt_handle" && n.namespace_ () == "uri:poosl")
      {
        if (!stmt_handle_.present ())
        {
          this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!breakpoint_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breakpoint_id",
        "uri:poosl");
    }

    if (!control_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "control_point",
        "uri:poosl");
    }

    if (!stmt_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "stmt_handle",
        "uri:poosl");
    }
  }

  T_enable_breakpoint_request* T_enable_breakpoint_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_enable_breakpoint_request (*this, f, c);
  }

  T_enable_breakpoint_request& T_enable_breakpoint_request::
  operator= (const T_enable_breakpoint_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->breakpoint_id_ = x.breakpoint_id_;
      this->control_point_ = x.control_point_;
      this->stmt_handle_ = x.stmt_handle_;
    }

    return *this;
  }

  T_enable_breakpoint_request::
  ~T_enable_breakpoint_request ()
  {
  }

  // T_disable_breakpoint_request
  //

  T_disable_breakpoint_request::
  T_disable_breakpoint_request ()
  : ::xml_schema::Type (),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
  }

  T_disable_breakpoint_request::
  T_disable_breakpoint_request (const Breakpoint_idType& breakpoint_id,
                                const Control_pointType& control_point,
                                const Stmt_handleType& stmt_handle)
  : ::xml_schema::Type (),
    breakpoint_id_ (breakpoint_id, this),
    control_point_ (control_point, this),
    stmt_handle_ (stmt_handle, this)
  {
  }

  T_disable_breakpoint_request::
  T_disable_breakpoint_request (const T_disable_breakpoint_request& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    breakpoint_id_ (x.breakpoint_id_, f, this),
    control_point_ (x.control_point_, f, this),
    stmt_handle_ (x.stmt_handle_, f, this)
  {
  }

  T_disable_breakpoint_request::
  T_disable_breakpoint_request (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_disable_breakpoint_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // breakpoint_id
      //
      if (n.name () == "breakpoint_id" && n.namespace_ () == "uri:poosl")
      {
        if (!breakpoint_id_.present ())
        {
          this->breakpoint_id_.set (Breakpoint_idTraits::create (i, f, this));
          continue;
        }
      }

      // control_point
      //
      if (n.name () == "control_point" && n.namespace_ () == "uri:poosl")
      {
        if (!control_point_.present ())
        {
          this->control_point_.set (Control_pointTraits::create (i, f, this));
          continue;
        }
      }

      // stmt_handle
      //
      if (n.name () == "stmt_handle" && n.namespace_ () == "uri:poosl")
      {
        if (!stmt_handle_.present ())
        {
          this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!breakpoint_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breakpoint_id",
        "uri:poosl");
    }

    if (!control_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "control_point",
        "uri:poosl");
    }

    if (!stmt_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "stmt_handle",
        "uri:poosl");
    }
  }

  T_disable_breakpoint_request* T_disable_breakpoint_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_disable_breakpoint_request (*this, f, c);
  }

  T_disable_breakpoint_request& T_disable_breakpoint_request::
  operator= (const T_disable_breakpoint_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->breakpoint_id_ = x.breakpoint_id_;
      this->control_point_ = x.control_point_;
      this->stmt_handle_ = x.stmt_handle_;
    }

    return *this;
  }

  T_disable_breakpoint_request::
  ~T_disable_breakpoint_request ()
  {
  }

  // T_delete_breakpoint_request
  //

  T_delete_breakpoint_request::
  T_delete_breakpoint_request ()
  : ::xml_schema::Type (),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
  }

  T_delete_breakpoint_request::
  T_delete_breakpoint_request (const Breakpoint_idType& breakpoint_id,
                               const Control_pointType& control_point,
                               const Stmt_handleType& stmt_handle)
  : ::xml_schema::Type (),
    breakpoint_id_ (breakpoint_id, this),
    control_point_ (control_point, this),
    stmt_handle_ (stmt_handle, this)
  {
  }

  T_delete_breakpoint_request::
  T_delete_breakpoint_request (const T_delete_breakpoint_request& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    breakpoint_id_ (x.breakpoint_id_, f, this),
    control_point_ (x.control_point_, f, this),
    stmt_handle_ (x.stmt_handle_, f, this)
  {
  }

  T_delete_breakpoint_request::
  T_delete_breakpoint_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    breakpoint_id_ (this),
    control_point_ (this),
    stmt_handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_delete_breakpoint_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // breakpoint_id
      //
      if (n.name () == "breakpoint_id" && n.namespace_ () == "uri:poosl")
      {
        if (!breakpoint_id_.present ())
        {
          this->breakpoint_id_.set (Breakpoint_idTraits::create (i, f, this));
          continue;
        }
      }

      // control_point
      //
      if (n.name () == "control_point" && n.namespace_ () == "uri:poosl")
      {
        if (!control_point_.present ())
        {
          this->control_point_.set (Control_pointTraits::create (i, f, this));
          continue;
        }
      }

      // stmt_handle
      //
      if (n.name () == "stmt_handle" && n.namespace_ () == "uri:poosl")
      {
        if (!stmt_handle_.present ())
        {
          this->stmt_handle_.set (Stmt_handleTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!breakpoint_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breakpoint_id",
        "uri:poosl");
    }

    if (!control_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "control_point",
        "uri:poosl");
    }

    if (!stmt_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "stmt_handle",
        "uri:poosl");
    }
  }

  T_delete_breakpoint_request* T_delete_breakpoint_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_delete_breakpoint_request (*this, f, c);
  }

  T_delete_breakpoint_request& T_delete_breakpoint_request::
  operator= (const T_delete_breakpoint_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->breakpoint_id_ = x.breakpoint_id_;
      this->control_point_ = x.control_point_;
      this->stmt_handle_ = x.stmt_handle_;
    }

    return *this;
  }

  T_delete_breakpoint_request::
  ~T_delete_breakpoint_request ()
  {
  }

  // T_set_variable_request
  //

  T_set_variable_request::
  T_set_variable_request ()
  : ::xml_schema::Type (),
    var_handle_ (this),
    list_handle_ (this),
    type_ (this),
    literal_ (this)
  {
  }

  T_set_variable_request::
  T_set_variable_request (const Var_handleType& var_handle,
                          const List_handleType& list_handle,
                          const TypeType& type,
                          const LiteralType& literal)
  : ::xml_schema::Type (),
    var_handle_ (var_handle, this),
    list_handle_ (list_handle, this),
    type_ (type, this),
    literal_ (literal, this)
  {
  }

  T_set_variable_request::
  T_set_variable_request (const T_set_variable_request& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    var_handle_ (x.var_handle_, f, this),
    list_handle_ (x.list_handle_, f, this),
    type_ (x.type_, f, this),
    literal_ (x.literal_, f, this)
  {
  }

  T_set_variable_request::
  T_set_variable_request (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    var_handle_ (this),
    list_handle_ (this),
    type_ (this),
    literal_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void T_set_variable_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // var_handle
      //
      if (n.name () == "var_handle" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Var_handleType > r (
          Var_handleTraits::create (i, f, this));

        if (!var_handle_.present ())
        {
          this->var_handle_.set (::std::move (r));
          continue;
        }
      }

      // list_handle
      //
      if (n.name () == "list_handle" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< List_handleType > r (
          List_handleTraits::create (i, f, this));

        if (!list_handle_.present ())
        {
          this->list_handle_.set (::std::move (r));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< TypeType > r (
          TypeTraits::create (i, f, this));

        if (!type_.present ())
        {
          this->type_.set (::std::move (r));
          continue;
        }
      }

      // literal
      //
      if (n.name () == "literal" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< LiteralType > r (
          LiteralTraits::create (i, f, this));

        if (!literal_.present ())
        {
          this->literal_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!var_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "var_handle",
        "uri:poosl");
    }

    if (!list_handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "list_handle",
        "uri:poosl");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "uri:poosl");
    }

    if (!literal_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "literal",
        "uri:poosl");
    }
  }

  T_set_variable_request* T_set_variable_request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class T_set_variable_request (*this, f, c);
  }

  T_set_variable_request& T_set_variable_request::
  operator= (const T_set_variable_request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->var_handle_ = x.var_handle_;
      this->list_handle_ = x.list_handle_;
      this->type_ = x.type_;
      this->literal_ = x.literal_;
    }

    return *this;
  }

  T_set_variable_request::
  ~T_set_variable_request ()
  {
  }

  // Request
  //

  Request::
  Request ()
  : ::xml_schema::Type (),
    load_ (this),
    save_ (this),
    serialize_ (this),
    deserialize_ (this),
    compile_ (this),
    list_files_ (this),
    get_position_ (this),
    list_classes_ (this),
    get_top_level_specification_ (this),
    get_class_definition_ (this),
    get_object_handle_ (this),
    get_method_definition_ (this),
    rename_object_request_ (this),
    insert_object_request_ (this),
    delete_object_request_ (this),
    instantiate_ (this),
    command_ (this),
    execution_state_ (this),
    get_transitions_ (this),
    perform_transition_ (this),
    perform_process_step_ (this),
    inspect_ (this),
    observe_ (this),
    create_breakpoint_ (this),
    set_breakpoint_condition_ (this),
    enable_breakpoint_ (this),
    disable_breakpoint_ (this),
    delete_breakpoint_ (this),
    set_variable_ (this),
    eengine_event_setup_ (this),
    id_ (this)
  {
  }

  Request::
  Request (const IdType& id)
  : ::xml_schema::Type (),
    load_ (this),
    save_ (this),
    serialize_ (this),
    deserialize_ (this),
    compile_ (this),
    list_files_ (this),
    get_position_ (this),
    list_classes_ (this),
    get_top_level_specification_ (this),
    get_class_definition_ (this),
    get_object_handle_ (this),
    get_method_definition_ (this),
    rename_object_request_ (this),
    insert_object_request_ (this),
    delete_object_request_ (this),
    instantiate_ (this),
    command_ (this),
    execution_state_ (this),
    get_transitions_ (this),
    perform_transition_ (this),
    perform_process_step_ (this),
    inspect_ (this),
    observe_ (this),
    create_breakpoint_ (this),
    set_breakpoint_condition_ (this),
    enable_breakpoint_ (this),
    disable_breakpoint_ (this),
    delete_breakpoint_ (this),
    set_variable_ (this),
    eengine_event_setup_ (this),
    id_ (id, this)
  {
  }

  Request::
  Request (const Request& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    load_ (x.load_, f, this),
    save_ (x.save_, f, this),
    serialize_ (x.serialize_, f, this),
    deserialize_ (x.deserialize_, f, this),
    compile_ (x.compile_, f, this),
    list_files_ (x.list_files_, f, this),
    get_position_ (x.get_position_, f, this),
    list_classes_ (x.list_classes_, f, this),
    get_top_level_specification_ (x.get_top_level_specification_, f, this),
    get_class_definition_ (x.get_class_definition_, f, this),
    get_object_handle_ (x.get_object_handle_, f, this),
    get_method_definition_ (x.get_method_definition_, f, this),
    rename_object_request_ (x.rename_object_request_, f, this),
    insert_object_request_ (x.insert_object_request_, f, this),
    delete_object_request_ (x.delete_object_request_, f, this),
    instantiate_ (x.instantiate_, f, this),
    command_ (x.command_, f, this),
    execution_state_ (x.execution_state_, f, this),
    get_transitions_ (x.get_transitions_, f, this),
    perform_transition_ (x.perform_transition_, f, this),
    perform_process_step_ (x.perform_process_step_, f, this),
    inspect_ (x.inspect_, f, this),
    observe_ (x.observe_, f, this),
    create_breakpoint_ (x.create_breakpoint_, f, this),
    set_breakpoint_condition_ (x.set_breakpoint_condition_, f, this),
    enable_breakpoint_ (x.enable_breakpoint_, f, this),
    disable_breakpoint_ (x.disable_breakpoint_, f, this),
    delete_breakpoint_ (x.delete_breakpoint_, f, this),
    set_variable_ (x.set_variable_, f, this),
    eengine_event_setup_ (x.eengine_event_setup_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Request::
  Request (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    load_ (this),
    save_ (this),
    serialize_ (this),
    deserialize_ (this),
    compile_ (this),
    list_files_ (this),
    get_position_ (this),
    list_classes_ (this),
    get_top_level_specification_ (this),
    get_class_definition_ (this),
    get_object_handle_ (this),
    get_method_definition_ (this),
    rename_object_request_ (this),
    insert_object_request_ (this),
    delete_object_request_ (this),
    instantiate_ (this),
    command_ (this),
    execution_state_ (this),
    get_transitions_ (this),
    perform_transition_ (this),
    perform_process_step_ (this),
    inspect_ (this),
    observe_ (this),
    create_breakpoint_ (this),
    set_breakpoint_condition_ (this),
    enable_breakpoint_ (this),
    disable_breakpoint_ (this),
    delete_breakpoint_ (this),
    set_variable_ (this),
    eengine_event_setup_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // load
      //
      if (n.name () == "load" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< LoadType > r (
          LoadTraits::create (i, f, this));

        if (!this->load_)
        {
          this->load_.set (::std::move (r));
          continue;
        }
      }

      // save
      //
      if (n.name () == "save" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< SaveType > r (
          SaveTraits::create (i, f, this));

        if (!this->save_)
        {
          this->save_.set (::std::move (r));
          continue;
        }
      }

      // serialize
      //
      if (n.name () == "serialize" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< SerializeType > r (
          SerializeTraits::create (i, f, this));

        if (!this->serialize_)
        {
          this->serialize_.set (::std::move (r));
          continue;
        }
      }

      // deserialize
      //
      if (n.name () == "deserialize" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< DeserializeType > r (
          DeserializeTraits::create (i, f, this));

        if (!this->deserialize_)
        {
          this->deserialize_.set (::std::move (r));
          continue;
        }
      }

      // compile
      //
      if (n.name () == "compile" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< CompileType > r (
          CompileTraits::create (i, f, this));

        if (!this->compile_)
        {
          this->compile_.set (::std::move (r));
          continue;
        }
      }

      // list_files
      //
      if (n.name () == "list_files" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< List_filesType > r (
          List_filesTraits::create (i, f, this));

        if (!this->list_files_)
        {
          this->list_files_.set (::std::move (r));
          continue;
        }
      }

      // get_position
      //
      if (n.name () == "get_position" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_positionType > r (
          Get_positionTraits::create (i, f, this));

        if (!this->get_position_)
        {
          this->get_position_.set (::std::move (r));
          continue;
        }
      }

      // list_classes
      //
      if (n.name () == "list_classes" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< List_classesType > r (
          List_classesTraits::create (i, f, this));

        if (!this->list_classes_)
        {
          this->list_classes_.set (::std::move (r));
          continue;
        }
      }

      // get_top_level_specification
      //
      if (n.name () == "get_top_level_specification" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_top_level_specificationType > r (
          Get_top_level_specificationTraits::create (i, f, this));

        if (!this->get_top_level_specification_)
        {
          this->get_top_level_specification_.set (::std::move (r));
          continue;
        }
      }

      // get_class_definition
      //
      if (n.name () == "get_class_definition" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_class_definitionType > r (
          Get_class_definitionTraits::create (i, f, this));

        if (!this->get_class_definition_)
        {
          this->get_class_definition_.set (::std::move (r));
          continue;
        }
      }

      // get_object_handle
      //
      if (n.name () == "get_object_handle" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_object_handleType > r (
          Get_object_handleTraits::create (i, f, this));

        if (!this->get_object_handle_)
        {
          this->get_object_handle_.set (::std::move (r));
          continue;
        }
      }

      // get_method_definition
      //
      if (n.name () == "get_method_definition" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_method_definitionType > r (
          Get_method_definitionTraits::create (i, f, this));

        if (!this->get_method_definition_)
        {
          this->get_method_definition_.set (::std::move (r));
          continue;
        }
      }

      // rename_object_request
      //
      if (n.name () == "rename_object_request" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Rename_object_requestType > r (
          Rename_object_requestTraits::create (i, f, this));

        if (!this->rename_object_request_)
        {
          this->rename_object_request_.set (::std::move (r));
          continue;
        }
      }

      // insert_object_request
      //
      if (n.name () == "insert_object_request" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Insert_object_requestType > r (
          Insert_object_requestTraits::create (i, f, this));

        if (!this->insert_object_request_)
        {
          this->insert_object_request_.set (::std::move (r));
          continue;
        }
      }

      // delete_object_request
      //
      if (n.name () == "delete_object_request" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Delete_object_requestType > r (
          Delete_object_requestTraits::create (i, f, this));

        if (!this->delete_object_request_)
        {
          this->delete_object_request_.set (::std::move (r));
          continue;
        }
      }

      // instantiate
      //
      if (n.name () == "instantiate" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< InstantiateType > r (
          InstantiateTraits::create (i, f, this));

        if (!this->instantiate_)
        {
          this->instantiate_.set (::std::move (r));
          continue;
        }
      }

      // command
      //
      if (n.name () == "command" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< CommandType > r (
          CommandTraits::create (i, f, this));

        if (!this->command_)
        {
          this->command_.set (::std::move (r));
          continue;
        }
      }

      // execution_state
      //
      if (n.name () == "execution_state" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Execution_stateType > r (
          Execution_stateTraits::create (i, f, this));

        if (!this->execution_state_)
        {
          this->execution_state_.set (::std::move (r));
          continue;
        }
      }

      // get_transitions
      //
      if (n.name () == "get_transitions" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Get_transitionsType > r (
          Get_transitionsTraits::create (i, f, this));

        if (!this->get_transitions_)
        {
          this->get_transitions_.set (::std::move (r));
          continue;
        }
      }

      // perform_transition
      //
      if (n.name () == "perform_transition" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Perform_transitionType > r (
          Perform_transitionTraits::create (i, f, this));

        if (!this->perform_transition_)
        {
          this->perform_transition_.set (::std::move (r));
          continue;
        }
      }

      // perform_process_step
      //
      if (n.name () == "perform_process_step" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Perform_process_stepType > r (
          Perform_process_stepTraits::create (i, f, this));

        if (!this->perform_process_step_)
        {
          this->perform_process_step_.set (::std::move (r));
          continue;
        }
      }

      // inspect
      //
      if (n.name () == "inspect" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< InspectType > r (
          InspectTraits::create (i, f, this));

        if (!this->inspect_)
        {
          this->inspect_.set (::std::move (r));
          continue;
        }
      }

      // observe
      //
      if (n.name () == "observe" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< ObserveType > r (
          ObserveTraits::create (i, f, this));

        if (!this->observe_)
        {
          this->observe_.set (::std::move (r));
          continue;
        }
      }

      // create_breakpoint
      //
      if (n.name () == "create_breakpoint" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Create_breakpointType > r (
          Create_breakpointTraits::create (i, f, this));

        if (!this->create_breakpoint_)
        {
          this->create_breakpoint_.set (::std::move (r));
          continue;
        }
      }

      // set_breakpoint_condition
      //
      if (n.name () == "set_breakpoint_condition" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Set_breakpoint_conditionType > r (
          Set_breakpoint_conditionTraits::create (i, f, this));

        if (!this->set_breakpoint_condition_)
        {
          this->set_breakpoint_condition_.set (::std::move (r));
          continue;
        }
      }

      // enable_breakpoint
      //
      if (n.name () == "enable_breakpoint" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Enable_breakpointType > r (
          Enable_breakpointTraits::create (i, f, this));

        if (!this->enable_breakpoint_)
        {
          this->enable_breakpoint_.set (::std::move (r));
          continue;
        }
      }

      // disable_breakpoint
      //
      if (n.name () == "disable_breakpoint" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Disable_breakpointType > r (
          Disable_breakpointTraits::create (i, f, this));

        if (!this->disable_breakpoint_)
        {
          this->disable_breakpoint_.set (::std::move (r));
          continue;
        }
      }

      // delete_breakpoint
      //
      if (n.name () == "delete_breakpoint" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Delete_breakpointType > r (
          Delete_breakpointTraits::create (i, f, this));

        if (!this->delete_breakpoint_)
        {
          this->delete_breakpoint_.set (::std::move (r));
          continue;
        }
      }

      // set_variable
      //
      if (n.name () == "set_variable" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Set_variableType > r (
          Set_variableTraits::create (i, f, this));

        if (!this->set_variable_)
        {
          this->set_variable_.set (::std::move (r));
          continue;
        }
      }

      // eengine_event_setup
      //
      if (n.name () == "eengine_event_setup" && n.namespace_ () == "uri:poosl")
      {
        ::std::unique_ptr< Eengine_event_setupType > r (
          Eengine_event_setupTraits::create (i, f, this));

        if (!this->eengine_event_setup_)
        {
          this->eengine_event_setup_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (IdTraits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  Request* Request::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Request (*this, f, c);
  }

  Request& Request::
  operator= (const Request& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->load_ = x.load_;
      this->save_ = x.save_;
      this->serialize_ = x.serialize_;
      this->deserialize_ = x.deserialize_;
      this->compile_ = x.compile_;
      this->list_files_ = x.list_files_;
      this->get_position_ = x.get_position_;
      this->list_classes_ = x.list_classes_;
      this->get_top_level_specification_ = x.get_top_level_specification_;
      this->get_class_definition_ = x.get_class_definition_;
      this->get_object_handle_ = x.get_object_handle_;
      this->get_method_definition_ = x.get_method_definition_;
      this->rename_object_request_ = x.rename_object_request_;
      this->insert_object_request_ = x.insert_object_request_;
      this->delete_object_request_ = x.delete_object_request_;
      this->instantiate_ = x.instantiate_;
      this->command_ = x.command_;
      this->execution_state_ = x.execution_state_;
      this->get_transitions_ = x.get_transitions_;
      this->perform_transition_ = x.perform_transition_;
      this->perform_process_step_ = x.perform_process_step_;
      this->inspect_ = x.inspect_;
      this->observe_ = x.observe_;
      this->create_breakpoint_ = x.create_breakpoint_;
      this->set_breakpoint_condition_ = x.set_breakpoint_condition_;
      this->enable_breakpoint_ = x.enable_breakpoint_;
      this->disable_breakpoint_ = x.disable_breakpoint_;
      this->delete_breakpoint_ = x.delete_breakpoint_;
      this->set_variable_ = x.set_variable_;
      this->eengine_event_setup_ = x.eengine_event_setup_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Request::
  ~Request ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace poosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const T_load_request& i)
  {
    o << ::std::endl << "filename: " << i.getFilename ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_save_request& i)
  {
    o << ::std::endl << "filename: " << i.getFilename ();
    o << ::std::endl << "string: " << i.getString ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_serialize_request& i)
  {
    o << ::std::endl << "handle: " << i.getHandle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_deserialize_request& i)
  {
    if (i.getPoosl_specification ())
    {
      o << ::std::endl << "poosl_specification: " << *i.getPoosl_specification ();
    }

    if (i.getCluster_class ())
    {
      o << ::std::endl << "cluster_class: " << *i.getCluster_class ();
    }

    if (i.getProcess_class ())
    {
      o << ::std::endl << "process_class: " << *i.getProcess_class ();
    }

    if (i.getData_class ())
    {
      o << ::std::endl << "data_class: " << *i.getData_class ();
    }

    if (i.getInitial_method_call ())
    {
      o << ::std::endl << "initial_method_call: " << *i.getInitial_method_call ();
    }

    if (i.getProcess_method ())
    {
      o << ::std::endl << "process_method: " << *i.getProcess_method ();
    }

    if (i.getData_method ())
    {
      o << ::std::endl << "data_method: " << *i.getData_method ();
    }

    if (i.getExpression ())
    {
      o << ::std::endl << "expression: " << *i.getExpression ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_compile_request& i)
  {
    if (i.getBasic_classes ())
    {
      o << ::std::endl << "basic_classes: " << *i.getBasic_classes ();
    }

    if (i.getPoosl_specification ())
    {
      o << ::std::endl << "poosl_specification: " << *i.getPoosl_specification ();
    }

    if (i.getCluster_class ())
    {
      o << ::std::endl << "cluster_class: " << *i.getCluster_class ();
    }

    if (i.getProcess_class ())
    {
      o << ::std::endl << "process_class: " << *i.getProcess_class ();
    }

    if (i.getData_class ())
    {
      o << ::std::endl << "data_class: " << *i.getData_class ();
    }

    if (i.getInitial_method_call ())
    {
      o << ::std::endl << "initial_method_call: " << *i.getInitial_method_call ();
    }

    if (i.getProcess_method ())
    {
      o << ::std::endl << "process_method: " << *i.getProcess_method ();
    }

    if (i.getData_method ())
    {
      o << ::std::endl << "data_method: " << *i.getData_method ();
    }

    if (i.getExpression ())
    {
      o << ::std::endl << "expression: " << *i.getExpression ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_list_classes_request&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_top_level_specification_request&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_class_definition_request& i)
  {
    o << ::std::endl << "class: " << i.getClass ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_method_definition_request& i)
  {
    o << ::std::endl << "method: " << i.getMethod ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_object_handle_request& i)
  {
    o << ::std::endl << "name: " << i.getName ();
    o << ::std::endl << "type: " << i.getType ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_rename_object_request& i)
  {
    o << ::std::endl << "handle: " << i.getHandle ();
    o << ::std::endl << "new_name: " << i.getNew_name ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_insert_object_request& i)
  {
    o << ::std::endl << "owner: " << i.getOwner ();
    o << ::std::endl << "property: " << i.getProperty ();
    o << ::std::endl << "value: " << i.getValue ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_delete_object_request& i)
  {
    for (T_delete_object_request::ObjectConstIterator
         b (i.getObject ().begin ()), e (i.getObject ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "object: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_instantiate_request& i)
  {
    o << ::std::endl << "poosl_specification: " << i.getPoosl_specification ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_list_files_request& i)
  {
    o << ::std::endl << "poosl_specification: " << i.getPoosl_specification ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_position_request& i)
  {
    o << ::std::endl << "stmt_handle: " << i.getStmt_handle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_command_request& i)
  {
    if (i.getType ())
    {
      o << ::std::endl << "type: " << *i.getType ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_execution_state_request&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_get_transitions_request&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_perform_transition_request& i)
  {
    o << ::std::endl << "handle: " << i.getHandle ();
    if (i.getData_debug ())
    {
      o << ::std::endl << "data_debug: " << *i.getData_debug ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_perform_process_step_request& i)
  {
    o << ::std::endl << "process_path: " << i.getProcess_path ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_inspect_request& i)
  {
    if (i.getName ())
    {
      o << ::std::endl << "name: " << *i.getName ();
    }

    if (i.getType ())
    {
      o << ::std::endl << "type: " << *i.getType ();
    }

    if (i.getHandle ())
    {
      o << ::std::endl << "handle: " << *i.getHandle ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_observe_request& i)
  {
    o << ::std::endl << "type: " << i.getType ();
    o << ::std::endl << "handle: " << i.getHandle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_eengine_event_setup_request& i)
  {
    o << ::std::endl << "communication_messages_enable: " << i.getCommunication_messages_enable ();
    if (i.getCommunication_messages_credits ())
    {
      o << ::std::endl << "communication_messages_credits: " << *i.getCommunication_messages_credits ();
    }

    o << ::std::endl << "communication_messages_credits_enable: " << i.getCommunication_messages_credits_enable ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_eengine_event_communication_credits_replenish& i)
  {
    o << ::std::endl << "credit: " << i.getCredit ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_create_breakpoint_request& i)
  {
    if (i.getName ())
    {
      o << ::std::endl << "name: " << *i.getName ();
    }

    if (i.getControl_point ())
    {
      o << ::std::endl << "control_point: " << *i.getControl_point ();
    }

    if (i.getStmt_handle ())
    {
      o << ::std::endl << "stmt_handle: " << *i.getStmt_handle ();
    }

    if (i.getPosition ())
    {
      o << ::std::endl << "position: " << *i.getPosition ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_set_breakpoint_condition_request& i)
  {
    o << ::std::endl << "breakpoint_id: " << i.getBreakpoint_id ();
    o << ::std::endl << "condition: " << i.getCondition ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_enable_breakpoint_request& i)
  {
    o << ::std::endl << "breakpoint_id: " << i.getBreakpoint_id ();
    o << ::std::endl << "control_point: " << i.getControl_point ();
    o << ::std::endl << "stmt_handle: " << i.getStmt_handle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_disable_breakpoint_request& i)
  {
    o << ::std::endl << "breakpoint_id: " << i.getBreakpoint_id ();
    o << ::std::endl << "control_point: " << i.getControl_point ();
    o << ::std::endl << "stmt_handle: " << i.getStmt_handle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_delete_breakpoint_request& i)
  {
    o << ::std::endl << "breakpoint_id: " << i.getBreakpoint_id ();
    o << ::std::endl << "control_point: " << i.getControl_point ();
    o << ::std::endl << "stmt_handle: " << i.getStmt_handle ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const T_set_variable_request& i)
  {
    o << ::std::endl << "var_handle: " << i.getVar_handle ();
    o << ::std::endl << "list_handle: " << i.getList_handle ();
    o << ::std::endl << "type: " << i.getType ();
    o << ::std::endl << "literal: " << i.getLiteral ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Request& i)
  {
    if (i.getLoad ())
    {
      o << ::std::endl << "load: " << *i.getLoad ();
    }

    if (i.getSave ())
    {
      o << ::std::endl << "save: " << *i.getSave ();
    }

    if (i.getSerialize ())
    {
      o << ::std::endl << "serialize: " << *i.getSerialize ();
    }

    if (i.getDeserialize ())
    {
      o << ::std::endl << "deserialize: " << *i.getDeserialize ();
    }

    if (i.getCompile ())
    {
      o << ::std::endl << "compile: " << *i.getCompile ();
    }

    if (i.getList_files ())
    {
      o << ::std::endl << "list_files: " << *i.getList_files ();
    }

    if (i.getGet_position ())
    {
      o << ::std::endl << "get_position: " << *i.getGet_position ();
    }

    if (i.getList_classes ())
    {
      o << ::std::endl << "list_classes: " << *i.getList_classes ();
    }

    if (i.getGet_top_level_specification ())
    {
      o << ::std::endl << "get_top_level_specification: " << *i.getGet_top_level_specification ();
    }

    if (i.getGet_class_definition ())
    {
      o << ::std::endl << "get_class_definition: " << *i.getGet_class_definition ();
    }

    if (i.getGet_object_handle ())
    {
      o << ::std::endl << "get_object_handle: " << *i.getGet_object_handle ();
    }

    if (i.getGet_method_definition ())
    {
      o << ::std::endl << "get_method_definition: " << *i.getGet_method_definition ();
    }

    if (i.getRename_object_request ())
    {
      o << ::std::endl << "rename_object_request: " << *i.getRename_object_request ();
    }

    if (i.getInsert_object_request ())
    {
      o << ::std::endl << "insert_object_request: " << *i.getInsert_object_request ();
    }

    if (i.getDelete_object_request ())
    {
      o << ::std::endl << "delete_object_request: " << *i.getDelete_object_request ();
    }

    if (i.getInstantiate ())
    {
      o << ::std::endl << "instantiate: " << *i.getInstantiate ();
    }

    if (i.getCommand ())
    {
      o << ::std::endl << "command: " << *i.getCommand ();
    }

    if (i.getExecution_state ())
    {
      o << ::std::endl << "execution_state: " << *i.getExecution_state ();
    }

    if (i.getGet_transitions ())
    {
      o << ::std::endl << "get_transitions: " << *i.getGet_transitions ();
    }

    if (i.getPerform_transition ())
    {
      o << ::std::endl << "perform_transition: " << *i.getPerform_transition ();
    }

    if (i.getPerform_process_step ())
    {
      o << ::std::endl << "perform_process_step: " << *i.getPerform_process_step ();
    }

    if (i.getInspect ())
    {
      o << ::std::endl << "inspect: " << *i.getInspect ();
    }

    if (i.getObserve ())
    {
      o << ::std::endl << "observe: " << *i.getObserve ();
    }

    if (i.getCreate_breakpoint ())
    {
      o << ::std::endl << "create_breakpoint: " << *i.getCreate_breakpoint ();
    }

    if (i.getSet_breakpoint_condition ())
    {
      o << ::std::endl << "set_breakpoint_condition: " << *i.getSet_breakpoint_condition ();
    }

    if (i.getEnable_breakpoint ())
    {
      o << ::std::endl << "enable_breakpoint: " << *i.getEnable_breakpoint ();
    }

    if (i.getDisable_breakpoint ())
    {
      o << ::std::endl << "disable_breakpoint: " << *i.getDisable_breakpoint ();
    }

    if (i.getDelete_breakpoint ())
    {
      o << ::std::endl << "delete_breakpoint: " << *i.getDelete_breakpoint ();
    }

    if (i.getSet_variable ())
    {
      o << ::std::endl << "set_variable: " << *i.getSet_variable ();
    }

    if (i.getEengine_event_setup ())
    {
      o << ::std::endl << "eengine_event_setup: " << *i.getEengine_event_setup ();
    }

    o << ::std::endl << "id: " << i.getId ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace poosl
{
  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::poosl::parseRequest (isrc, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::poosl::parseRequest (isrc, h, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::poosl::parseRequest (isrc, h, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::poosl::parseRequest (isrc, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::poosl::parseRequest (isrc, h, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::poosl::parseRequest (isrc, h, f, p);
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::poosl::Request > (
      ::poosl::parseRequest (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::poosl::Request > (
        ::poosl::parseRequest (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "request" &&
        n.namespace_ () == "uri:poosl")
    {
      ::std::unique_ptr< ::poosl::Request > r (
        ::xsd::cxx::tree::traits< ::poosl::Request, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "request",
      "uri:poosl");
  }

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "request" &&
        n.namespace_ () == "uri:poosl")
    {
      ::std::unique_ptr< ::poosl::Request > r (
        ::xsd::cxx::tree::traits< ::poosl::Request, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "request",
      "uri:poosl");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace poosl
{
  void
  serializeRequest (::std::ostream& o,
                    const ::poosl::Request& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeRequest (::std::ostream& o,
                    const ::poosl::Request& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeRequest (::std::ostream& o,
                    const ::poosl::Request& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeRequest (::xercesc::XMLFormatTarget& t,
                    const ::poosl::Request& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeRequest (::xercesc::XMLFormatTarget& t,
                    const ::poosl::Request& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeRequest (::xercesc::XMLFormatTarget& t,
                    const ::poosl::Request& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::poosl::serializeRequest (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeRequest (::xercesc::DOMDocument& d,
                    const ::poosl::Request& s,
                    ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "request" &&
        n.namespace_ () == "uri:poosl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "request",
        "uri:poosl");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeRequest (const ::poosl::Request& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "request",
        "uri:poosl",
        m, f));

    ::poosl::serializeRequest (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_load_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // filename
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filename",
          e));

      a << i.getFilename ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_save_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // filename
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "filename",
          "uri:poosl",
          e));

      s << i.getFilename ();
    }

    // string
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "string",
          "uri:poosl",
          e));

      s << i.getString ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_serialize_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "handle",
          "uri:poosl",
          e));

      s << i.getHandle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_deserialize_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // poosl_specification
    //
    if (i.getPoosl_specification ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "poosl_specification",
          "uri:poosl",
          e));

      s << *i.getPoosl_specification ();
    }

    // cluster_class
    //
    if (i.getCluster_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "cluster_class",
          "uri:poosl",
          e));

      s << *i.getCluster_class ();
    }

    // process_class
    //
    if (i.getProcess_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_class",
          "uri:poosl",
          e));

      s << *i.getProcess_class ();
    }

    // data_class
    //
    if (i.getData_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "data_class",
          "uri:poosl",
          e));

      s << *i.getData_class ();
    }

    // initial_method_call
    //
    if (i.getInitial_method_call ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "initial_method_call",
          "uri:poosl",
          e));

      s << *i.getInitial_method_call ();
    }

    // process_method
    //
    if (i.getProcess_method ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_method",
          "uri:poosl",
          e));

      s << *i.getProcess_method ();
    }

    // data_method
    //
    if (i.getData_method ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "data_method",
          "uri:poosl",
          e));

      s << *i.getData_method ();
    }

    // expression
    //
    if (i.getExpression ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "expression",
          "uri:poosl",
          e));

      s << *i.getExpression ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_compile_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // basic_classes
    //
    if (i.getBasic_classes ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "basic_classes",
          "uri:poosl",
          e));

      s << *i.getBasic_classes ();
    }

    // poosl_specification
    //
    if (i.getPoosl_specification ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "poosl_specification",
          "uri:poosl",
          e));

      s << *i.getPoosl_specification ();
    }

    // cluster_class
    //
    if (i.getCluster_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "cluster_class",
          "uri:poosl",
          e));

      s << *i.getCluster_class ();
    }

    // process_class
    //
    if (i.getProcess_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_class",
          "uri:poosl",
          e));

      s << *i.getProcess_class ();
    }

    // data_class
    //
    if (i.getData_class ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "data_class",
          "uri:poosl",
          e));

      s << *i.getData_class ();
    }

    // initial_method_call
    //
    if (i.getInitial_method_call ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "initial_method_call",
          "uri:poosl",
          e));

      s << *i.getInitial_method_call ();
    }

    // process_method
    //
    if (i.getProcess_method ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_method",
          "uri:poosl",
          e));

      s << *i.getProcess_method ();
    }

    // data_method
    //
    if (i.getData_method ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "data_method",
          "uri:poosl",
          e));

      s << *i.getData_method ();
    }

    // expression
    //
    if (i.getExpression ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "expression",
          "uri:poosl",
          e));

      s << *i.getExpression ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_list_classes_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const T_list_classes_request&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const T_list_classes_request&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_top_level_specification_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const T_get_top_level_specification_request&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const T_get_top_level_specification_request&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_class_definition_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // class
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "class",
          "uri:poosl",
          e));

      s << i.getClass ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_method_definition_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // method
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "method",
          "uri:poosl",
          e));

      s << i.getMethod ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_object_handle_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "uri:poosl",
          e));

      s << i.getName ();
    }

    // type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "uri:poosl",
          e));

      s << i.getType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_rename_object_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "handle",
          "uri:poosl",
          e));

      s << i.getHandle ();
    }

    // new_name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "new_name",
          "uri:poosl",
          e));

      s << i.getNew_name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_insert_object_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // owner
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "owner",
          "uri:poosl",
          e));

      s << i.getOwner ();
    }

    // property
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "property",
          "uri:poosl",
          e));

      s << i.getProperty ();
    }

    // value
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "value",
          "uri:poosl",
          e));

      s << i.getValue ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_delete_object_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // object
    //
    for (T_delete_object_request::ObjectConstIterator
         b (i.getObject ().begin ()), n (i.getObject ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "object",
          "uri:poosl",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_instantiate_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // poosl_specification
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "poosl_specification",
          "uri:poosl",
          e));

      s << i.getPoosl_specification ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_list_files_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // poosl_specification
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "poosl_specification",
          "uri:poosl",
          e));

      s << i.getPoosl_specification ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_position_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // stmt_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stmt_handle",
          "uri:poosl",
          e));

      s << i.getStmt_handle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_command_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // type
    //
    if (i.getType ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << *i.getType ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_execution_state_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const T_execution_state_request&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const T_execution_state_request&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_get_transitions_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const T_get_transitions_request&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const T_get_transitions_request&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_perform_transition_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "handle",
          "uri:poosl",
          e));

      s << i.getHandle ();
    }

    // data_debug
    //
    if (i.getData_debug ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "data_debug",
          e));

      a << *i.getData_debug ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_perform_process_step_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // process_path
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "process_path",
          "uri:poosl",
          e));

      s << i.getProcess_path ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_inspect_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    if (i.getName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "uri:poosl",
          e));

      s << *i.getName ();
    }

    // type
    //
    if (i.getType ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "uri:poosl",
          e));

      s << *i.getType ();
    }

    // handle
    //
    if (i.getHandle ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "handle",
          "uri:poosl",
          e));

      s << *i.getHandle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_observe_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << i.getType ();
    }

    // handle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "handle",
          e));

      a << i.getHandle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_eengine_event_setup_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // communication_messages_enable
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "communication_messages_enable",
          "uri:poosl",
          e));

      s << i.getCommunication_messages_enable ();
    }

    // communication_messages_credits
    //
    if (i.getCommunication_messages_credits ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "communication_messages_credits",
          "uri:poosl",
          e));

      s << *i.getCommunication_messages_credits ();
    }

    // communication_messages_credits_enable
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "communication_messages_credits_enable",
          "uri:poosl",
          e));

      s << i.getCommunication_messages_credits_enable ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_eengine_event_communication_credits_replenish& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // credit
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "credit",
          "uri:poosl",
          e));

      s << i.getCredit ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_create_breakpoint_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    if (i.getName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "uri:poosl",
          e));

      s << *i.getName ();
    }

    // control_point
    //
    if (i.getControl_point ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "control_point",
          "uri:poosl",
          e));

      s << *i.getControl_point ();
    }

    // stmt_handle
    //
    if (i.getStmt_handle ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stmt_handle",
          "uri:poosl",
          e));

      s << *i.getStmt_handle ();
    }

    // position
    //
    if (i.getPosition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "position",
          "uri:poosl",
          e));

      s << *i.getPosition ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_set_breakpoint_condition_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // breakpoint_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "breakpoint_id",
          "uri:poosl",
          e));

      s << i.getBreakpoint_id ();
    }

    // condition
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "condition",
          "uri:poosl",
          e));

      s << i.getCondition ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_enable_breakpoint_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // breakpoint_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "breakpoint_id",
          "uri:poosl",
          e));

      s << i.getBreakpoint_id ();
    }

    // control_point
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "control_point",
          "uri:poosl",
          e));

      s << i.getControl_point ();
    }

    // stmt_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stmt_handle",
          "uri:poosl",
          e));

      s << i.getStmt_handle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_disable_breakpoint_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // breakpoint_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "breakpoint_id",
          "uri:poosl",
          e));

      s << i.getBreakpoint_id ();
    }

    // control_point
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "control_point",
          "uri:poosl",
          e));

      s << i.getControl_point ();
    }

    // stmt_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stmt_handle",
          "uri:poosl",
          e));

      s << i.getStmt_handle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_delete_breakpoint_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // breakpoint_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "breakpoint_id",
          "uri:poosl",
          e));

      s << i.getBreakpoint_id ();
    }

    // control_point
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "control_point",
          "uri:poosl",
          e));

      s << i.getControl_point ();
    }

    // stmt_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stmt_handle",
          "uri:poosl",
          e));

      s << i.getStmt_handle ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const T_set_variable_request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // var_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "var_handle",
          "uri:poosl",
          e));

      s << i.getVar_handle ();
    }

    // list_handle
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "list_handle",
          "uri:poosl",
          e));

      s << i.getList_handle ();
    }

    // type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "uri:poosl",
          e));

      s << i.getType ();
    }

    // literal
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "literal",
          "uri:poosl",
          e));

      s << i.getLiteral ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Request& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // load
    //
    if (i.getLoad ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "load",
          "uri:poosl",
          e));

      s << *i.getLoad ();
    }

    // save
    //
    if (i.getSave ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "save",
          "uri:poosl",
          e));

      s << *i.getSave ();
    }

    // serialize
    //
    if (i.getSerialize ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "serialize",
          "uri:poosl",
          e));

      s << *i.getSerialize ();
    }

    // deserialize
    //
    if (i.getDeserialize ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "deserialize",
          "uri:poosl",
          e));

      s << *i.getDeserialize ();
    }

    // compile
    //
    if (i.getCompile ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "compile",
          "uri:poosl",
          e));

      s << *i.getCompile ();
    }

    // list_files
    //
    if (i.getList_files ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "list_files",
          "uri:poosl",
          e));

      s << *i.getList_files ();
    }

    // get_position
    //
    if (i.getGet_position ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_position",
          "uri:poosl",
          e));

      s << *i.getGet_position ();
    }

    // list_classes
    //
    if (i.getList_classes ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "list_classes",
          "uri:poosl",
          e));

      s << *i.getList_classes ();
    }

    // get_top_level_specification
    //
    if (i.getGet_top_level_specification ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_top_level_specification",
          "uri:poosl",
          e));

      s << *i.getGet_top_level_specification ();
    }

    // get_class_definition
    //
    if (i.getGet_class_definition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_class_definition",
          "uri:poosl",
          e));

      s << *i.getGet_class_definition ();
    }

    // get_object_handle
    //
    if (i.getGet_object_handle ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_object_handle",
          "uri:poosl",
          e));

      s << *i.getGet_object_handle ();
    }

    // get_method_definition
    //
    if (i.getGet_method_definition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_method_definition",
          "uri:poosl",
          e));

      s << *i.getGet_method_definition ();
    }

    // rename_object_request
    //
    if (i.getRename_object_request ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "rename_object_request",
          "uri:poosl",
          e));

      s << *i.getRename_object_request ();
    }

    // insert_object_request
    //
    if (i.getInsert_object_request ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "insert_object_request",
          "uri:poosl",
          e));

      s << *i.getInsert_object_request ();
    }

    // delete_object_request
    //
    if (i.getDelete_object_request ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "delete_object_request",
          "uri:poosl",
          e));

      s << *i.getDelete_object_request ();
    }

    // instantiate
    //
    if (i.getInstantiate ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "instantiate",
          "uri:poosl",
          e));

      s << *i.getInstantiate ();
    }

    // command
    //
    if (i.getCommand ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "command",
          "uri:poosl",
          e));

      s << *i.getCommand ();
    }

    // execution_state
    //
    if (i.getExecution_state ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "execution_state",
          "uri:poosl",
          e));

      s << *i.getExecution_state ();
    }

    // get_transitions
    //
    if (i.getGet_transitions ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "get_transitions",
          "uri:poosl",
          e));

      s << *i.getGet_transitions ();
    }

    // perform_transition
    //
    if (i.getPerform_transition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "perform_transition",
          "uri:poosl",
          e));

      s << *i.getPerform_transition ();
    }

    // perform_process_step
    //
    if (i.getPerform_process_step ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "perform_process_step",
          "uri:poosl",
          e));

      s << *i.getPerform_process_step ();
    }

    // inspect
    //
    if (i.getInspect ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "inspect",
          "uri:poosl",
          e));

      s << *i.getInspect ();
    }

    // observe
    //
    if (i.getObserve ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "observe",
          "uri:poosl",
          e));

      s << *i.getObserve ();
    }

    // create_breakpoint
    //
    if (i.getCreate_breakpoint ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "create_breakpoint",
          "uri:poosl",
          e));

      s << *i.getCreate_breakpoint ();
    }

    // set_breakpoint_condition
    //
    if (i.getSet_breakpoint_condition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "set_breakpoint_condition",
          "uri:poosl",
          e));

      s << *i.getSet_breakpoint_condition ();
    }

    // enable_breakpoint
    //
    if (i.getEnable_breakpoint ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "enable_breakpoint",
          "uri:poosl",
          e));

      s << *i.getEnable_breakpoint ();
    }

    // disable_breakpoint
    //
    if (i.getDisable_breakpoint ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "disable_breakpoint",
          "uri:poosl",
          e));

      s << *i.getDisable_breakpoint ();
    }

    // delete_breakpoint
    //
    if (i.getDelete_breakpoint ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "delete_breakpoint",
          "uri:poosl",
          e));

      s << *i.getDelete_breakpoint ();
    }

    // set_variable
    //
    if (i.getSet_variable ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "set_variable",
          "uri:poosl",
          e));

      s << *i.getSet_variable ();
    }

    // eengine_event_setup
    //
    if (i.getEengine_event_setup ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "eengine_event_setup",
          "uri:poosl",
          e));

      s << *i.getEengine_event_setup ();
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.getId ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

