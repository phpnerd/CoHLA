// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef ROTALUMISREQUEST_HXX
#define ROTALUMISREQUEST_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-iso8859-1.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace poosl
{
  class T_load_request;
  class T_save_request;
  class T_serialize_request;
  class T_deserialize_request;
  class T_compile_request;
  class T_list_classes_request;
  class T_get_top_level_specification_request;
  class T_get_class_definition_request;
  class T_get_method_definition_request;
  class T_get_object_handle_request;
  class T_rename_object_request;
  class T_insert_object_request;
  class T_delete_object_request;
  class T_instantiate_request;
  class T_list_files_request;
  class T_get_position_request;
  class T_command_request;
  class T_execution_state_request;
  class T_get_transitions_request;
  class T_perform_transition_request;
  class T_perform_process_step_request;
  class T_inspect_request;
  class T_observe_request;
  class T_eengine_event_setup_request;
  class T_eengine_event_communication_credits_replenish;
  class T_create_breakpoint_request;
  class T_set_breakpoint_condition_request;
  class T_enable_breakpoint_request;
  class T_disable_breakpoint_request;
  class T_delete_breakpoint_request;
  class T_set_variable_request;
  class Request;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-iso8859-1.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "rotalumisapitypes.hxx"

#include "pooslmodel.hxx"

namespace poosl
{
  class T_load_request: public ::xml_schema::Type
  {
    public:
    // filename
    //
    typedef ::poosl::T_filename FilenameType;
    typedef ::xsd::cxx::tree::traits< FilenameType, char > FilenameTraits;

    const FilenameType&
    getFilename () const;

    FilenameType&
    getFilename ();

    void
    setFilename (const FilenameType& x);

    void
    setFilename (::std::unique_ptr< FilenameType > p);

    // Constructors.
    //
    T_load_request ();

    T_load_request (const FilenameType&);

    T_load_request (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    T_load_request (const T_load_request& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual T_load_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_load_request&
    operator= (const T_load_request& x);

    virtual 
    ~T_load_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< FilenameType > filename_;
  };

  class T_save_request: public ::xml_schema::Type
  {
    public:
    // filename
    //
    typedef ::poosl::T_filename FilenameType;
    typedef ::xsd::cxx::tree::traits< FilenameType, char > FilenameTraits;

    const FilenameType&
    getFilename () const;

    FilenameType&
    getFilename ();

    void
    setFilename (const FilenameType& x);

    void
    setFilename (::std::unique_ptr< FilenameType > p);

    // string
    //
    typedef ::xml_schema::String StringType;
    typedef ::xsd::cxx::tree::traits< StringType, char > StringTraits;

    const StringType&
    getString () const;

    StringType&
    getString ();

    void
    setString (const StringType& x);

    void
    setString (::std::unique_ptr< StringType > p);

    // Constructors.
    //
    T_save_request ();

    T_save_request (const FilenameType&,
                    const StringType&);

    T_save_request (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    T_save_request (const T_save_request& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual T_save_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_save_request&
    operator= (const T_save_request& x);

    virtual 
    ~T_save_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< FilenameType > filename_;
    ::xsd::cxx::tree::one< StringType > string_;
  };

  class T_serialize_request: public ::xml_schema::Type
  {
    public:
    // handle
    //
    typedef ::xml_schema::Integer HandleType;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleType&
    getHandle () const;

    HandleType&
    getHandle ();

    void
    setHandle (const HandleType& x);

    // Constructors.
    //
    T_serialize_request ();

    T_serialize_request (const HandleType&);

    T_serialize_request (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    T_serialize_request (const T_serialize_request& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual T_serialize_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_serialize_request&
    operator= (const T_serialize_request& x);

    virtual 
    ~T_serialize_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< HandleType > handle_;
  };

  class T_deserialize_request: public ::xml_schema::Type
  {
    public:
    // poosl_specification
    //
    typedef ::poosl::T_poosl_specification Poosl_specificationType;
    typedef ::xsd::cxx::tree::optional< Poosl_specificationType > Poosl_specificationOptional;
    typedef ::xsd::cxx::tree::traits< Poosl_specificationType, char > Poosl_specificationTraits;

    const Poosl_specificationOptional&
    getPoosl_specification () const;

    Poosl_specificationOptional&
    getPoosl_specification ();

    void
    setPoosl_specification (const Poosl_specificationType& x);

    void
    setPoosl_specification (const Poosl_specificationOptional& x);

    void
    setPoosl_specification (::std::unique_ptr< Poosl_specificationType > p);

    // cluster_class
    //
    typedef ::poosl::T_cluster_class Cluster_classType;
    typedef ::xsd::cxx::tree::optional< Cluster_classType > Cluster_classOptional;
    typedef ::xsd::cxx::tree::traits< Cluster_classType, char > Cluster_classTraits;

    const Cluster_classOptional&
    getCluster_class () const;

    Cluster_classOptional&
    getCluster_class ();

    void
    setCluster_class (const Cluster_classType& x);

    void
    setCluster_class (const Cluster_classOptional& x);

    void
    setCluster_class (::std::unique_ptr< Cluster_classType > p);

    // process_class
    //
    typedef ::poosl::T_process_class Process_classType;
    typedef ::xsd::cxx::tree::optional< Process_classType > Process_classOptional;
    typedef ::xsd::cxx::tree::traits< Process_classType, char > Process_classTraits;

    const Process_classOptional&
    getProcess_class () const;

    Process_classOptional&
    getProcess_class ();

    void
    setProcess_class (const Process_classType& x);

    void
    setProcess_class (const Process_classOptional& x);

    void
    setProcess_class (::std::unique_ptr< Process_classType > p);

    // data_class
    //
    typedef ::poosl::T_data_class Data_classType;
    typedef ::xsd::cxx::tree::optional< Data_classType > Data_classOptional;
    typedef ::xsd::cxx::tree::traits< Data_classType, char > Data_classTraits;

    const Data_classOptional&
    getData_class () const;

    Data_classOptional&
    getData_class ();

    void
    setData_class (const Data_classType& x);

    void
    setData_class (const Data_classOptional& x);

    void
    setData_class (::std::unique_ptr< Data_classType > p);

    // initial_method_call
    //
    typedef ::poosl::T_process_method_call Initial_method_callType;
    typedef ::xsd::cxx::tree::optional< Initial_method_callType > Initial_method_callOptional;
    typedef ::xsd::cxx::tree::traits< Initial_method_callType, char > Initial_method_callTraits;

    const Initial_method_callOptional&
    getInitial_method_call () const;

    Initial_method_callOptional&
    getInitial_method_call ();

    void
    setInitial_method_call (const Initial_method_callType& x);

    void
    setInitial_method_call (const Initial_method_callOptional& x);

    void
    setInitial_method_call (::std::unique_ptr< Initial_method_callType > p);

    // process_method
    //
    typedef ::poosl::T_process_method Process_methodType;
    typedef ::xsd::cxx::tree::optional< Process_methodType > Process_methodOptional;
    typedef ::xsd::cxx::tree::traits< Process_methodType, char > Process_methodTraits;

    const Process_methodOptional&
    getProcess_method () const;

    Process_methodOptional&
    getProcess_method ();

    void
    setProcess_method (const Process_methodType& x);

    void
    setProcess_method (const Process_methodOptional& x);

    void
    setProcess_method (::std::unique_ptr< Process_methodType > p);

    // data_method
    //
    typedef ::poosl::T_data_method Data_methodType;
    typedef ::xsd::cxx::tree::optional< Data_methodType > Data_methodOptional;
    typedef ::xsd::cxx::tree::traits< Data_methodType, char > Data_methodTraits;

    const Data_methodOptional&
    getData_method () const;

    Data_methodOptional&
    getData_method ();

    void
    setData_method (const Data_methodType& x);

    void
    setData_method (const Data_methodOptional& x);

    void
    setData_method (::std::unique_ptr< Data_methodType > p);

    // expression
    //
    typedef ::poosl::T_expression ExpressionType;
    typedef ::xsd::cxx::tree::optional< ExpressionType > ExpressionOptional;
    typedef ::xsd::cxx::tree::traits< ExpressionType, char > ExpressionTraits;

    const ExpressionOptional&
    getExpression () const;

    ExpressionOptional&
    getExpression ();

    void
    setExpression (const ExpressionType& x);

    void
    setExpression (const ExpressionOptional& x);

    void
    setExpression (::std::unique_ptr< ExpressionType > p);

    // Constructors.
    //
    T_deserialize_request ();

    T_deserialize_request (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    T_deserialize_request (const T_deserialize_request& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual T_deserialize_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_deserialize_request&
    operator= (const T_deserialize_request& x);

    virtual 
    ~T_deserialize_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    Poosl_specificationOptional poosl_specification_;
    Cluster_classOptional cluster_class_;
    Process_classOptional process_class_;
    Data_classOptional data_class_;
    Initial_method_callOptional initial_method_call_;
    Process_methodOptional process_method_;
    Data_methodOptional data_method_;
    ExpressionOptional expression_;
  };

  class T_compile_request: public ::xml_schema::Type
  {
    public:
    // basic_classes
    //
    typedef ::xml_schema::String Basic_classesType;
    typedef ::xsd::cxx::tree::optional< Basic_classesType > Basic_classesOptional;
    typedef ::xsd::cxx::tree::traits< Basic_classesType, char > Basic_classesTraits;

    const Basic_classesOptional&
    getBasic_classes () const;

    Basic_classesOptional&
    getBasic_classes ();

    void
    setBasic_classes (const Basic_classesType& x);

    void
    setBasic_classes (const Basic_classesOptional& x);

    void
    setBasic_classes (::std::unique_ptr< Basic_classesType > p);

    // poosl_specification
    //
    typedef ::xml_schema::String Poosl_specificationType;
    typedef ::xsd::cxx::tree::optional< Poosl_specificationType > Poosl_specificationOptional;
    typedef ::xsd::cxx::tree::traits< Poosl_specificationType, char > Poosl_specificationTraits;

    const Poosl_specificationOptional&
    getPoosl_specification () const;

    Poosl_specificationOptional&
    getPoosl_specification ();

    void
    setPoosl_specification (const Poosl_specificationType& x);

    void
    setPoosl_specification (const Poosl_specificationOptional& x);

    void
    setPoosl_specification (::std::unique_ptr< Poosl_specificationType > p);

    // cluster_class
    //
    typedef ::xml_schema::String Cluster_classType;
    typedef ::xsd::cxx::tree::optional< Cluster_classType > Cluster_classOptional;
    typedef ::xsd::cxx::tree::traits< Cluster_classType, char > Cluster_classTraits;

    const Cluster_classOptional&
    getCluster_class () const;

    Cluster_classOptional&
    getCluster_class ();

    void
    setCluster_class (const Cluster_classType& x);

    void
    setCluster_class (const Cluster_classOptional& x);

    void
    setCluster_class (::std::unique_ptr< Cluster_classType > p);

    // process_class
    //
    typedef ::xml_schema::String Process_classType;
    typedef ::xsd::cxx::tree::optional< Process_classType > Process_classOptional;
    typedef ::xsd::cxx::tree::traits< Process_classType, char > Process_classTraits;

    const Process_classOptional&
    getProcess_class () const;

    Process_classOptional&
    getProcess_class ();

    void
    setProcess_class (const Process_classType& x);

    void
    setProcess_class (const Process_classOptional& x);

    void
    setProcess_class (::std::unique_ptr< Process_classType > p);

    // data_class
    //
    typedef ::xml_schema::String Data_classType;
    typedef ::xsd::cxx::tree::optional< Data_classType > Data_classOptional;
    typedef ::xsd::cxx::tree::traits< Data_classType, char > Data_classTraits;

    const Data_classOptional&
    getData_class () const;

    Data_classOptional&
    getData_class ();

    void
    setData_class (const Data_classType& x);

    void
    setData_class (const Data_classOptional& x);

    void
    setData_class (::std::unique_ptr< Data_classType > p);

    // initial_method_call
    //
    typedef ::xml_schema::String Initial_method_callType;
    typedef ::xsd::cxx::tree::optional< Initial_method_callType > Initial_method_callOptional;
    typedef ::xsd::cxx::tree::traits< Initial_method_callType, char > Initial_method_callTraits;

    const Initial_method_callOptional&
    getInitial_method_call () const;

    Initial_method_callOptional&
    getInitial_method_call ();

    void
    setInitial_method_call (const Initial_method_callType& x);

    void
    setInitial_method_call (const Initial_method_callOptional& x);

    void
    setInitial_method_call (::std::unique_ptr< Initial_method_callType > p);

    // process_method
    //
    typedef ::xml_schema::String Process_methodType;
    typedef ::xsd::cxx::tree::optional< Process_methodType > Process_methodOptional;
    typedef ::xsd::cxx::tree::traits< Process_methodType, char > Process_methodTraits;

    const Process_methodOptional&
    getProcess_method () const;

    Process_methodOptional&
    getProcess_method ();

    void
    setProcess_method (const Process_methodType& x);

    void
    setProcess_method (const Process_methodOptional& x);

    void
    setProcess_method (::std::unique_ptr< Process_methodType > p);

    // data_method
    //
    typedef ::xml_schema::String Data_methodType;
    typedef ::xsd::cxx::tree::optional< Data_methodType > Data_methodOptional;
    typedef ::xsd::cxx::tree::traits< Data_methodType, char > Data_methodTraits;

    const Data_methodOptional&
    getData_method () const;

    Data_methodOptional&
    getData_method ();

    void
    setData_method (const Data_methodType& x);

    void
    setData_method (const Data_methodOptional& x);

    void
    setData_method (::std::unique_ptr< Data_methodType > p);

    // expression
    //
    typedef ::xml_schema::String ExpressionType;
    typedef ::xsd::cxx::tree::optional< ExpressionType > ExpressionOptional;
    typedef ::xsd::cxx::tree::traits< ExpressionType, char > ExpressionTraits;

    const ExpressionOptional&
    getExpression () const;

    ExpressionOptional&
    getExpression ();

    void
    setExpression (const ExpressionType& x);

    void
    setExpression (const ExpressionOptional& x);

    void
    setExpression (::std::unique_ptr< ExpressionType > p);

    // Constructors.
    //
    T_compile_request ();

    T_compile_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    T_compile_request (const T_compile_request& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual T_compile_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_compile_request&
    operator= (const T_compile_request& x);

    virtual 
    ~T_compile_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    Basic_classesOptional basic_classes_;
    Poosl_specificationOptional poosl_specification_;
    Cluster_classOptional cluster_class_;
    Process_classOptional process_class_;
    Data_classOptional data_class_;
    Initial_method_callOptional initial_method_call_;
    Process_methodOptional process_method_;
    Data_methodOptional data_method_;
    ExpressionOptional expression_;
  };

  class T_list_classes_request: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    T_list_classes_request ();

    T_list_classes_request (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    T_list_classes_request (const ::xercesc::DOMAttr& a,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    T_list_classes_request (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    T_list_classes_request (const T_list_classes_request& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual T_list_classes_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~T_list_classes_request ();
  };

  class T_get_top_level_specification_request: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    T_get_top_level_specification_request ();

    T_get_top_level_specification_request (const ::xercesc::DOMElement& e,
                                           ::xml_schema::Flags f = 0,
                                           ::xml_schema::Container* c = 0);

    T_get_top_level_specification_request (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::Flags f = 0,
                                           ::xml_schema::Container* c = 0);

    T_get_top_level_specification_request (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::Flags f = 0,
                                           ::xml_schema::Container* c = 0);

    T_get_top_level_specification_request (const T_get_top_level_specification_request& x,
                                           ::xml_schema::Flags f = 0,
                                           ::xml_schema::Container* c = 0);

    virtual T_get_top_level_specification_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~T_get_top_level_specification_request ();
  };

  class T_get_class_definition_request: public ::xml_schema::Type
  {
    public:
    // class
    //
    typedef ::poosl::T_class_name ClassType;
    typedef ::xsd::cxx::tree::traits< ClassType, char > ClassTraits;

    const ClassType&
    getClass () const;

    ClassType&
    getClass ();

    void
    setClass (const ClassType& x);

    void
    setClass (::std::unique_ptr< ClassType > p);

    // Constructors.
    //
    T_get_class_definition_request ();

    T_get_class_definition_request (const ClassType&);

    T_get_class_definition_request (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    T_get_class_definition_request (const T_get_class_definition_request& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual T_get_class_definition_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_get_class_definition_request&
    operator= (const T_get_class_definition_request& x);

    virtual 
    ~T_get_class_definition_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ClassType > class__;
  };

  class T_get_method_definition_request: public ::xml_schema::Type
  {
    public:
    // method
    //
    typedef ::poosl::T_method_name MethodType;
    typedef ::xsd::cxx::tree::traits< MethodType, char > MethodTraits;

    const MethodType&
    getMethod () const;

    MethodType&
    getMethod ();

    void
    setMethod (const MethodType& x);

    void
    setMethod (::std::unique_ptr< MethodType > p);

    // Constructors.
    //
    T_get_method_definition_request ();

    T_get_method_definition_request (const MethodType&);

    T_get_method_definition_request (const ::xercesc::DOMElement& e,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

    T_get_method_definition_request (const T_get_method_definition_request& x,
                                     ::xml_schema::Flags f = 0,
                                     ::xml_schema::Container* c = 0);

    virtual T_get_method_definition_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_get_method_definition_request&
    operator= (const T_get_method_definition_request& x);

    virtual 
    ~T_get_method_definition_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MethodType > method_;
  };

  class T_get_object_handle_request: public ::xml_schema::Type
  {
    public:
    // name
    //
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameType&
    getName () const;

    NameType&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (::std::unique_ptr< NameType > p);

    // type
    //
    typedef ::poosl::T_inspect_type TypeType;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeType&
    getType () const;

    TypeType&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (::std::unique_ptr< TypeType > p);

    // Constructors.
    //
    T_get_object_handle_request ();

    T_get_object_handle_request (const NameType&,
                                 const TypeType&);

    T_get_object_handle_request (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    T_get_object_handle_request (const T_get_object_handle_request& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual T_get_object_handle_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_get_object_handle_request&
    operator= (const T_get_object_handle_request& x);

    virtual 
    ~T_get_object_handle_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NameType > name_;
    ::xsd::cxx::tree::one< TypeType > type_;
  };

  class T_rename_object_request: public ::xml_schema::Type
  {
    public:
    // handle
    //
    typedef ::xml_schema::Integer HandleType;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleType&
    getHandle () const;

    HandleType&
    getHandle ();

    void
    setHandle (const HandleType& x);

    // new_name
    //
    typedef ::xml_schema::String New_nameType;
    typedef ::xsd::cxx::tree::traits< New_nameType, char > New_nameTraits;

    const New_nameType&
    getNew_name () const;

    New_nameType&
    getNew_name ();

    void
    setNew_name (const New_nameType& x);

    void
    setNew_name (::std::unique_ptr< New_nameType > p);

    // Constructors.
    //
    T_rename_object_request ();

    T_rename_object_request (const HandleType&,
                             const New_nameType&);

    T_rename_object_request (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    T_rename_object_request (const T_rename_object_request& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual T_rename_object_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_rename_object_request&
    operator= (const T_rename_object_request& x);

    virtual 
    ~T_rename_object_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< HandleType > handle_;
    ::xsd::cxx::tree::one< New_nameType > new_name_;
  };

  class T_insert_object_request: public ::xml_schema::Type
  {
    public:
    // owner
    //
    typedef ::xml_schema::Integer OwnerType;
    typedef ::xsd::cxx::tree::traits< OwnerType, char > OwnerTraits;

    const OwnerType&
    getOwner () const;

    OwnerType&
    getOwner ();

    void
    setOwner (const OwnerType& x);

    // property
    //
    typedef ::xml_schema::String PropertyType;
    typedef ::xsd::cxx::tree::traits< PropertyType, char > PropertyTraits;

    const PropertyType&
    getProperty () const;

    PropertyType&
    getProperty ();

    void
    setProperty (const PropertyType& x);

    void
    setProperty (::std::unique_ptr< PropertyType > p);

    // value
    //
    typedef ::xml_schema::Integer ValueType;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueType&
    getValue () const;

    ValueType&
    getValue ();

    void
    setValue (const ValueType& x);

    // Constructors.
    //
    T_insert_object_request ();

    T_insert_object_request (const OwnerType&,
                             const PropertyType&,
                             const ValueType&);

    T_insert_object_request (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    T_insert_object_request (const T_insert_object_request& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual T_insert_object_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_insert_object_request&
    operator= (const T_insert_object_request& x);

    virtual 
    ~T_insert_object_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OwnerType > owner_;
    ::xsd::cxx::tree::one< PropertyType > property_;
    ::xsd::cxx::tree::one< ValueType > value_;
  };

  class T_delete_object_request: public ::xml_schema::Type
  {
    public:
    // object
    //
    typedef ::xml_schema::Integer ObjectType;
    typedef ::xsd::cxx::tree::sequence< ObjectType > ObjectSequence;
    typedef ObjectSequence::iterator ObjectIterator;
    typedef ObjectSequence::const_iterator ObjectConstIterator;
    typedef ::xsd::cxx::tree::traits< ObjectType, char > ObjectTraits;

    const ObjectSequence&
    getObject () const;

    ObjectSequence&
    getObject ();

    void
    setObject (const ObjectSequence& s);

    // Constructors.
    //
    T_delete_object_request ();

    T_delete_object_request (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    T_delete_object_request (const T_delete_object_request& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual T_delete_object_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_delete_object_request&
    operator= (const T_delete_object_request& x);

    virtual 
    ~T_delete_object_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ObjectSequence object_;
  };

  class T_instantiate_request: public ::xml_schema::Type
  {
    public:
    // poosl_specification
    //
    typedef ::xml_schema::Integer Poosl_specificationType;
    typedef ::xsd::cxx::tree::traits< Poosl_specificationType, char > Poosl_specificationTraits;

    const Poosl_specificationType&
    getPoosl_specification () const;

    Poosl_specificationType&
    getPoosl_specification ();

    void
    setPoosl_specification (const Poosl_specificationType& x);

    // Constructors.
    //
    T_instantiate_request ();

    T_instantiate_request (const Poosl_specificationType&);

    T_instantiate_request (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    T_instantiate_request (const T_instantiate_request& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual T_instantiate_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_instantiate_request&
    operator= (const T_instantiate_request& x);

    virtual 
    ~T_instantiate_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Poosl_specificationType > poosl_specification_;
  };

  class T_list_files_request: public ::xml_schema::Type
  {
    public:
    // poosl_specification
    //
    typedef ::xml_schema::Integer Poosl_specificationType;
    typedef ::xsd::cxx::tree::traits< Poosl_specificationType, char > Poosl_specificationTraits;

    const Poosl_specificationType&
    getPoosl_specification () const;

    Poosl_specificationType&
    getPoosl_specification ();

    void
    setPoosl_specification (const Poosl_specificationType& x);

    // Constructors.
    //
    T_list_files_request ();

    T_list_files_request (const Poosl_specificationType&);

    T_list_files_request (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    T_list_files_request (const T_list_files_request& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual T_list_files_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_list_files_request&
    operator= (const T_list_files_request& x);

    virtual 
    ~T_list_files_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Poosl_specificationType > poosl_specification_;
  };

  class T_get_position_request: public ::xml_schema::Type
  {
    public:
    // stmt_handle
    //
    typedef ::xml_schema::Int Stmt_handleType;
    typedef ::xsd::cxx::tree::traits< Stmt_handleType, char > Stmt_handleTraits;

    const Stmt_handleType&
    getStmt_handle () const;

    Stmt_handleType&
    getStmt_handle ();

    void
    setStmt_handle (const Stmt_handleType& x);

    // Constructors.
    //
    T_get_position_request ();

    T_get_position_request (const Stmt_handleType&);

    T_get_position_request (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    T_get_position_request (const T_get_position_request& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual T_get_position_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_get_position_request&
    operator= (const T_get_position_request& x);

    virtual 
    ~T_get_position_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Stmt_handleType > stmt_handle_;
  };

  class T_command_request: public ::xml_schema::Type
  {
    public:
    // type
    //
    typedef ::poosl::T_command TypeType;
    typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeOptional&
    getType () const;

    TypeOptional&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (const TypeOptional& x);

    void
    setType (::std::unique_ptr< TypeType > p);

    // Constructors.
    //
    T_command_request ();

    T_command_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    T_command_request (const T_command_request& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual T_command_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_command_request&
    operator= (const T_command_request& x);

    virtual 
    ~T_command_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TypeOptional type_;
  };

  class T_execution_state_request: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    T_execution_state_request ();

    T_execution_state_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_execution_state_request (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_execution_state_request (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_execution_state_request (const T_execution_state_request& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual T_execution_state_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~T_execution_state_request ();
  };

  class T_get_transitions_request: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    T_get_transitions_request ();

    T_get_transitions_request (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_get_transitions_request (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_get_transitions_request (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    T_get_transitions_request (const T_get_transitions_request& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual T_get_transitions_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~T_get_transitions_request ();
  };

  class T_perform_transition_request: public ::xml_schema::Type
  {
    public:
    // handle
    //
    typedef ::xml_schema::Integer HandleType;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleType&
    getHandle () const;

    HandleType&
    getHandle ();

    void
    setHandle (const HandleType& x);

    // data_debug
    //
    typedef ::xml_schema::Boolean Data_debugType;
    typedef ::xsd::cxx::tree::optional< Data_debugType > Data_debugOptional;
    typedef ::xsd::cxx::tree::traits< Data_debugType, char > Data_debugTraits;

    const Data_debugOptional&
    getData_debug () const;

    Data_debugOptional&
    getData_debug ();

    void
    setData_debug (const Data_debugType& x);

    void
    setData_debug (const Data_debugOptional& x);

    // Constructors.
    //
    T_perform_transition_request ();

    T_perform_transition_request (const HandleType&);

    T_perform_transition_request (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    T_perform_transition_request (const T_perform_transition_request& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual T_perform_transition_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_perform_transition_request&
    operator= (const T_perform_transition_request& x);

    virtual 
    ~T_perform_transition_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< HandleType > handle_;
    Data_debugOptional data_debug_;
  };

  class T_perform_process_step_request: public ::xml_schema::Type
  {
    public:
    // process_path
    //
    typedef ::xml_schema::String Process_pathType;
    typedef ::xsd::cxx::tree::traits< Process_pathType, char > Process_pathTraits;

    const Process_pathType&
    getProcess_path () const;

    Process_pathType&
    getProcess_path ();

    void
    setProcess_path (const Process_pathType& x);

    void
    setProcess_path (::std::unique_ptr< Process_pathType > p);

    // Constructors.
    //
    T_perform_process_step_request ();

    T_perform_process_step_request (const Process_pathType&);

    T_perform_process_step_request (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    T_perform_process_step_request (const T_perform_process_step_request& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual T_perform_process_step_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_perform_process_step_request&
    operator= (const T_perform_process_step_request& x);

    virtual 
    ~T_perform_process_step_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Process_pathType > process_path_;
  };

  class T_inspect_request: public ::xml_schema::Type
  {
    public:
    // name
    //
    typedef ::poosl::T_instance_name NameType;
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameOptional&
    getName () const;

    NameOptional&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (const NameOptional& x);

    void
    setName (::std::unique_ptr< NameType > p);

    // type
    //
    typedef ::poosl::T_inspect_type TypeType;
    typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeOptional&
    getType () const;

    TypeOptional&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (const TypeOptional& x);

    void
    setType (::std::unique_ptr< TypeType > p);

    // handle
    //
    typedef ::xml_schema::Integer HandleType;
    typedef ::xsd::cxx::tree::optional< HandleType > HandleOptional;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleOptional&
    getHandle () const;

    HandleOptional&
    getHandle ();

    void
    setHandle (const HandleType& x);

    void
    setHandle (const HandleOptional& x);

    // Constructors.
    //
    T_inspect_request ();

    T_inspect_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    T_inspect_request (const T_inspect_request& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual T_inspect_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_inspect_request&
    operator= (const T_inspect_request& x);

    virtual 
    ~T_inspect_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NameOptional name_;
    TypeOptional type_;
    HandleOptional handle_;
  };

  class T_observe_request: public ::xml_schema::Type
  {
    public:
    // type
    //
    typedef ::poosl::T_instance_type TypeType;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeType&
    getType () const;

    TypeType&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (::std::unique_ptr< TypeType > p);

    // handle
    //
    typedef ::xml_schema::Integer HandleType;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleType&
    getHandle () const;

    HandleType&
    getHandle ();

    void
    setHandle (const HandleType& x);

    // Constructors.
    //
    T_observe_request ();

    T_observe_request (const TypeType&,
                       const HandleType&);

    T_observe_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    T_observe_request (const T_observe_request& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual T_observe_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_observe_request&
    operator= (const T_observe_request& x);

    virtual 
    ~T_observe_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TypeType > type_;
    ::xsd::cxx::tree::one< HandleType > handle_;
  };

  class T_eengine_event_setup_request: public ::xml_schema::Type
  {
    public:
    // communication_messages_enable
    //
    typedef ::xml_schema::Boolean Communication_messages_enableType;
    typedef ::xsd::cxx::tree::traits< Communication_messages_enableType, char > Communication_messages_enableTraits;

    const Communication_messages_enableType&
    getCommunication_messages_enable () const;

    Communication_messages_enableType&
    getCommunication_messages_enable ();

    void
    setCommunication_messages_enable (const Communication_messages_enableType& x);

    // communication_messages_credits
    //
    typedef ::xml_schema::Integer Communication_messages_creditsType;
    typedef ::xsd::cxx::tree::optional< Communication_messages_creditsType > Communication_messages_creditsOptional;
    typedef ::xsd::cxx::tree::traits< Communication_messages_creditsType, char > Communication_messages_creditsTraits;

    const Communication_messages_creditsOptional&
    getCommunication_messages_credits () const;

    Communication_messages_creditsOptional&
    getCommunication_messages_credits ();

    void
    setCommunication_messages_credits (const Communication_messages_creditsType& x);

    void
    setCommunication_messages_credits (const Communication_messages_creditsOptional& x);

    // communication_messages_credits_enable
    //
    typedef ::xml_schema::Boolean Communication_messages_credits_enableType;
    typedef ::xsd::cxx::tree::traits< Communication_messages_credits_enableType, char > Communication_messages_credits_enableTraits;

    const Communication_messages_credits_enableType&
    getCommunication_messages_credits_enable () const;

    Communication_messages_credits_enableType&
    getCommunication_messages_credits_enable ();

    void
    setCommunication_messages_credits_enable (const Communication_messages_credits_enableType& x);

    // Constructors.
    //
    T_eengine_event_setup_request ();

    T_eengine_event_setup_request (const Communication_messages_enableType&,
                                   const Communication_messages_credits_enableType&);

    T_eengine_event_setup_request (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    T_eengine_event_setup_request (const T_eengine_event_setup_request& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual T_eengine_event_setup_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_eengine_event_setup_request&
    operator= (const T_eengine_event_setup_request& x);

    virtual 
    ~T_eengine_event_setup_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Communication_messages_enableType > communication_messages_enable_;
    Communication_messages_creditsOptional communication_messages_credits_;
    ::xsd::cxx::tree::one< Communication_messages_credits_enableType > communication_messages_credits_enable_;
  };

  class T_eengine_event_communication_credits_replenish: public ::xml_schema::Type
  {
    public:
    // credit
    //
    typedef ::xml_schema::Integer CreditType;
    typedef ::xsd::cxx::tree::traits< CreditType, char > CreditTraits;

    const CreditType&
    getCredit () const;

    CreditType&
    getCredit ();

    void
    setCredit (const CreditType& x);

    // Constructors.
    //
    T_eengine_event_communication_credits_replenish ();

    T_eengine_event_communication_credits_replenish (const CreditType&);

    T_eengine_event_communication_credits_replenish (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::Flags f = 0,
                                                     ::xml_schema::Container* c = 0);

    T_eengine_event_communication_credits_replenish (const T_eengine_event_communication_credits_replenish& x,
                                                     ::xml_schema::Flags f = 0,
                                                     ::xml_schema::Container* c = 0);

    virtual T_eengine_event_communication_credits_replenish*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_eengine_event_communication_credits_replenish&
    operator= (const T_eengine_event_communication_credits_replenish& x);

    virtual 
    ~T_eengine_event_communication_credits_replenish ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CreditType > credit_;
  };

  class T_create_breakpoint_request: public ::xml_schema::Type
  {
    public:
    // name
    //
    typedef ::poosl::T_identifier NameType;
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameOptional&
    getName () const;

    NameOptional&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (const NameOptional& x);

    void
    setName (::std::unique_ptr< NameType > p);

    // control_point
    //
    typedef ::xml_schema::Integer Control_pointType;
    typedef ::xsd::cxx::tree::optional< Control_pointType > Control_pointOptional;
    typedef ::xsd::cxx::tree::traits< Control_pointType, char > Control_pointTraits;

    const Control_pointOptional&
    getControl_point () const;

    Control_pointOptional&
    getControl_point ();

    void
    setControl_point (const Control_pointType& x);

    void
    setControl_point (const Control_pointOptional& x);

    // stmt_handle
    //
    typedef ::xml_schema::Int Stmt_handleType;
    typedef ::xsd::cxx::tree::optional< Stmt_handleType > Stmt_handleOptional;
    typedef ::xsd::cxx::tree::traits< Stmt_handleType, char > Stmt_handleTraits;

    const Stmt_handleOptional&
    getStmt_handle () const;

    Stmt_handleOptional&
    getStmt_handle ();

    void
    setStmt_handle (const Stmt_handleType& x);

    void
    setStmt_handle (const Stmt_handleOptional& x);

    // position
    //
    typedef ::poosl::T_source_position PositionType;
    typedef ::xsd::cxx::tree::optional< PositionType > PositionOptional;
    typedef ::xsd::cxx::tree::traits< PositionType, char > PositionTraits;

    const PositionOptional&
    getPosition () const;

    PositionOptional&
    getPosition ();

    void
    setPosition (const PositionType& x);

    void
    setPosition (const PositionOptional& x);

    void
    setPosition (::std::unique_ptr< PositionType > p);

    // Constructors.
    //
    T_create_breakpoint_request ();

    T_create_breakpoint_request (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    T_create_breakpoint_request (const T_create_breakpoint_request& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual T_create_breakpoint_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_create_breakpoint_request&
    operator= (const T_create_breakpoint_request& x);

    virtual 
    ~T_create_breakpoint_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NameOptional name_;
    Control_pointOptional control_point_;
    Stmt_handleOptional stmt_handle_;
    PositionOptional position_;
  };

  class T_set_breakpoint_condition_request: public ::xml_schema::Type
  {
    public:
    // breakpoint_id
    //
    typedef ::xml_schema::Integer Breakpoint_idType;
    typedef ::xsd::cxx::tree::traits< Breakpoint_idType, char > Breakpoint_idTraits;

    const Breakpoint_idType&
    getBreakpoint_id () const;

    Breakpoint_idType&
    getBreakpoint_id ();

    void
    setBreakpoint_id (const Breakpoint_idType& x);

    // condition
    //
    typedef ::poosl::T_expression ConditionType;
    typedef ::xsd::cxx::tree::traits< ConditionType, char > ConditionTraits;

    const ConditionType&
    getCondition () const;

    ConditionType&
    getCondition ();

    void
    setCondition (const ConditionType& x);

    void
    setCondition (::std::unique_ptr< ConditionType > p);

    // Constructors.
    //
    T_set_breakpoint_condition_request ();

    T_set_breakpoint_condition_request (const Breakpoint_idType&,
                                        const ConditionType&);

    T_set_breakpoint_condition_request (const Breakpoint_idType&,
                                        ::std::unique_ptr< ConditionType >);

    T_set_breakpoint_condition_request (const ::xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    T_set_breakpoint_condition_request (const T_set_breakpoint_condition_request& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    virtual T_set_breakpoint_condition_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_set_breakpoint_condition_request&
    operator= (const T_set_breakpoint_condition_request& x);

    virtual 
    ~T_set_breakpoint_condition_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Breakpoint_idType > breakpoint_id_;
    ::xsd::cxx::tree::one< ConditionType > condition_;
  };

  class T_enable_breakpoint_request: public ::xml_schema::Type
  {
    public:
    // breakpoint_id
    //
    typedef ::xml_schema::Integer Breakpoint_idType;
    typedef ::xsd::cxx::tree::traits< Breakpoint_idType, char > Breakpoint_idTraits;

    const Breakpoint_idType&
    getBreakpoint_id () const;

    Breakpoint_idType&
    getBreakpoint_id ();

    void
    setBreakpoint_id (const Breakpoint_idType& x);

    // control_point
    //
    typedef ::xml_schema::Integer Control_pointType;
    typedef ::xsd::cxx::tree::traits< Control_pointType, char > Control_pointTraits;

    const Control_pointType&
    getControl_point () const;

    Control_pointType&
    getControl_point ();

    void
    setControl_point (const Control_pointType& x);

    // stmt_handle
    //
    typedef ::xml_schema::Int Stmt_handleType;
    typedef ::xsd::cxx::tree::traits< Stmt_handleType, char > Stmt_handleTraits;

    const Stmt_handleType&
    getStmt_handle () const;

    Stmt_handleType&
    getStmt_handle ();

    void
    setStmt_handle (const Stmt_handleType& x);

    // Constructors.
    //
    T_enable_breakpoint_request ();

    T_enable_breakpoint_request (const Breakpoint_idType&,
                                 const Control_pointType&,
                                 const Stmt_handleType&);

    T_enable_breakpoint_request (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    T_enable_breakpoint_request (const T_enable_breakpoint_request& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual T_enable_breakpoint_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_enable_breakpoint_request&
    operator= (const T_enable_breakpoint_request& x);

    virtual 
    ~T_enable_breakpoint_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Breakpoint_idType > breakpoint_id_;
    ::xsd::cxx::tree::one< Control_pointType > control_point_;
    ::xsd::cxx::tree::one< Stmt_handleType > stmt_handle_;
  };

  class T_disable_breakpoint_request: public ::xml_schema::Type
  {
    public:
    // breakpoint_id
    //
    typedef ::xml_schema::Integer Breakpoint_idType;
    typedef ::xsd::cxx::tree::traits< Breakpoint_idType, char > Breakpoint_idTraits;

    const Breakpoint_idType&
    getBreakpoint_id () const;

    Breakpoint_idType&
    getBreakpoint_id ();

    void
    setBreakpoint_id (const Breakpoint_idType& x);

    // control_point
    //
    typedef ::xml_schema::Integer Control_pointType;
    typedef ::xsd::cxx::tree::traits< Control_pointType, char > Control_pointTraits;

    const Control_pointType&
    getControl_point () const;

    Control_pointType&
    getControl_point ();

    void
    setControl_point (const Control_pointType& x);

    // stmt_handle
    //
    typedef ::xml_schema::Int Stmt_handleType;
    typedef ::xsd::cxx::tree::traits< Stmt_handleType, char > Stmt_handleTraits;

    const Stmt_handleType&
    getStmt_handle () const;

    Stmt_handleType&
    getStmt_handle ();

    void
    setStmt_handle (const Stmt_handleType& x);

    // Constructors.
    //
    T_disable_breakpoint_request ();

    T_disable_breakpoint_request (const Breakpoint_idType&,
                                  const Control_pointType&,
                                  const Stmt_handleType&);

    T_disable_breakpoint_request (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    T_disable_breakpoint_request (const T_disable_breakpoint_request& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual T_disable_breakpoint_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_disable_breakpoint_request&
    operator= (const T_disable_breakpoint_request& x);

    virtual 
    ~T_disable_breakpoint_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Breakpoint_idType > breakpoint_id_;
    ::xsd::cxx::tree::one< Control_pointType > control_point_;
    ::xsd::cxx::tree::one< Stmt_handleType > stmt_handle_;
  };

  class T_delete_breakpoint_request: public ::xml_schema::Type
  {
    public:
    // breakpoint_id
    //
    typedef ::xml_schema::Integer Breakpoint_idType;
    typedef ::xsd::cxx::tree::traits< Breakpoint_idType, char > Breakpoint_idTraits;

    const Breakpoint_idType&
    getBreakpoint_id () const;

    Breakpoint_idType&
    getBreakpoint_id ();

    void
    setBreakpoint_id (const Breakpoint_idType& x);

    // control_point
    //
    typedef ::xml_schema::Integer Control_pointType;
    typedef ::xsd::cxx::tree::traits< Control_pointType, char > Control_pointTraits;

    const Control_pointType&
    getControl_point () const;

    Control_pointType&
    getControl_point ();

    void
    setControl_point (const Control_pointType& x);

    // stmt_handle
    //
    typedef ::xml_schema::Int Stmt_handleType;
    typedef ::xsd::cxx::tree::traits< Stmt_handleType, char > Stmt_handleTraits;

    const Stmt_handleType&
    getStmt_handle () const;

    Stmt_handleType&
    getStmt_handle ();

    void
    setStmt_handle (const Stmt_handleType& x);

    // Constructors.
    //
    T_delete_breakpoint_request ();

    T_delete_breakpoint_request (const Breakpoint_idType&,
                                 const Control_pointType&,
                                 const Stmt_handleType&);

    T_delete_breakpoint_request (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    T_delete_breakpoint_request (const T_delete_breakpoint_request& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual T_delete_breakpoint_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_delete_breakpoint_request&
    operator= (const T_delete_breakpoint_request& x);

    virtual 
    ~T_delete_breakpoint_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Breakpoint_idType > breakpoint_id_;
    ::xsd::cxx::tree::one< Control_pointType > control_point_;
    ::xsd::cxx::tree::one< Stmt_handleType > stmt_handle_;
  };

  class T_set_variable_request: public ::xml_schema::Type
  {
    public:
    // var_handle
    //
    typedef ::poosl::T_handle_id Var_handleType;
    typedef ::xsd::cxx::tree::traits< Var_handleType, char > Var_handleTraits;

    const Var_handleType&
    getVar_handle () const;

    Var_handleType&
    getVar_handle ();

    void
    setVar_handle (const Var_handleType& x);

    void
    setVar_handle (::std::unique_ptr< Var_handleType > p);

    // list_handle
    //
    typedef ::poosl::T_handle_id List_handleType;
    typedef ::xsd::cxx::tree::traits< List_handleType, char > List_handleTraits;

    const List_handleType&
    getList_handle () const;

    List_handleType&
    getList_handle ();

    void
    setList_handle (const List_handleType& x);

    void
    setList_handle (::std::unique_ptr< List_handleType > p);

    // type
    //
    typedef ::poosl::T_constant_type TypeType;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeType&
    getType () const;

    TypeType&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (::std::unique_ptr< TypeType > p);

    // literal
    //
    typedef ::xml_schema::String LiteralType;
    typedef ::xsd::cxx::tree::traits< LiteralType, char > LiteralTraits;

    const LiteralType&
    getLiteral () const;

    LiteralType&
    getLiteral ();

    void
    setLiteral (const LiteralType& x);

    void
    setLiteral (::std::unique_ptr< LiteralType > p);

    // Constructors.
    //
    T_set_variable_request ();

    T_set_variable_request (const Var_handleType&,
                            const List_handleType&,
                            const TypeType&,
                            const LiteralType&);

    T_set_variable_request (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    T_set_variable_request (const T_set_variable_request& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual T_set_variable_request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    T_set_variable_request&
    operator= (const T_set_variable_request& x);

    virtual 
    ~T_set_variable_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Var_handleType > var_handle_;
    ::xsd::cxx::tree::one< List_handleType > list_handle_;
    ::xsd::cxx::tree::one< TypeType > type_;
    ::xsd::cxx::tree::one< LiteralType > literal_;
  };

  class Request: public ::xml_schema::Type
  {
    public:
    // load
    //
    typedef ::poosl::T_load_request LoadType;
    typedef ::xsd::cxx::tree::optional< LoadType > LoadOptional;
    typedef ::xsd::cxx::tree::traits< LoadType, char > LoadTraits;

    const LoadOptional&
    getLoad () const;

    LoadOptional&
    getLoad ();

    void
    setLoad (const LoadType& x);

    void
    setLoad (const LoadOptional& x);

    void
    setLoad (::std::unique_ptr< LoadType > p);

    // save
    //
    typedef ::poosl::T_save_request SaveType;
    typedef ::xsd::cxx::tree::optional< SaveType > SaveOptional;
    typedef ::xsd::cxx::tree::traits< SaveType, char > SaveTraits;

    const SaveOptional&
    getSave () const;

    SaveOptional&
    getSave ();

    void
    setSave (const SaveType& x);

    void
    setSave (const SaveOptional& x);

    void
    setSave (::std::unique_ptr< SaveType > p);

    // serialize
    //
    typedef ::poosl::T_serialize_request SerializeType;
    typedef ::xsd::cxx::tree::optional< SerializeType > SerializeOptional;
    typedef ::xsd::cxx::tree::traits< SerializeType, char > SerializeTraits;

    const SerializeOptional&
    getSerialize () const;

    SerializeOptional&
    getSerialize ();

    void
    setSerialize (const SerializeType& x);

    void
    setSerialize (const SerializeOptional& x);

    void
    setSerialize (::std::unique_ptr< SerializeType > p);

    // deserialize
    //
    typedef ::poosl::T_deserialize_request DeserializeType;
    typedef ::xsd::cxx::tree::optional< DeserializeType > DeserializeOptional;
    typedef ::xsd::cxx::tree::traits< DeserializeType, char > DeserializeTraits;

    const DeserializeOptional&
    getDeserialize () const;

    DeserializeOptional&
    getDeserialize ();

    void
    setDeserialize (const DeserializeType& x);

    void
    setDeserialize (const DeserializeOptional& x);

    void
    setDeserialize (::std::unique_ptr< DeserializeType > p);

    // compile
    //
    typedef ::poosl::T_compile_request CompileType;
    typedef ::xsd::cxx::tree::optional< CompileType > CompileOptional;
    typedef ::xsd::cxx::tree::traits< CompileType, char > CompileTraits;

    const CompileOptional&
    getCompile () const;

    CompileOptional&
    getCompile ();

    void
    setCompile (const CompileType& x);

    void
    setCompile (const CompileOptional& x);

    void
    setCompile (::std::unique_ptr< CompileType > p);

    // list_files
    //
    typedef ::poosl::T_list_files_request List_filesType;
    typedef ::xsd::cxx::tree::optional< List_filesType > List_filesOptional;
    typedef ::xsd::cxx::tree::traits< List_filesType, char > List_filesTraits;

    const List_filesOptional&
    getList_files () const;

    List_filesOptional&
    getList_files ();

    void
    setList_files (const List_filesType& x);

    void
    setList_files (const List_filesOptional& x);

    void
    setList_files (::std::unique_ptr< List_filesType > p);

    // get_position
    //
    typedef ::poosl::T_get_position_request Get_positionType;
    typedef ::xsd::cxx::tree::optional< Get_positionType > Get_positionOptional;
    typedef ::xsd::cxx::tree::traits< Get_positionType, char > Get_positionTraits;

    const Get_positionOptional&
    getGet_position () const;

    Get_positionOptional&
    getGet_position ();

    void
    setGet_position (const Get_positionType& x);

    void
    setGet_position (const Get_positionOptional& x);

    void
    setGet_position (::std::unique_ptr< Get_positionType > p);

    // list_classes
    //
    typedef ::poosl::T_list_classes_request List_classesType;
    typedef ::xsd::cxx::tree::optional< List_classesType > List_classesOptional;
    typedef ::xsd::cxx::tree::traits< List_classesType, char > List_classesTraits;

    const List_classesOptional&
    getList_classes () const;

    List_classesOptional&
    getList_classes ();

    void
    setList_classes (const List_classesType& x);

    void
    setList_classes (const List_classesOptional& x);

    void
    setList_classes (::std::unique_ptr< List_classesType > p);

    // get_top_level_specification
    //
    typedef ::poosl::T_get_top_level_specification_request Get_top_level_specificationType;
    typedef ::xsd::cxx::tree::optional< Get_top_level_specificationType > Get_top_level_specificationOptional;
    typedef ::xsd::cxx::tree::traits< Get_top_level_specificationType, char > Get_top_level_specificationTraits;

    const Get_top_level_specificationOptional&
    getGet_top_level_specification () const;

    Get_top_level_specificationOptional&
    getGet_top_level_specification ();

    void
    setGet_top_level_specification (const Get_top_level_specificationType& x);

    void
    setGet_top_level_specification (const Get_top_level_specificationOptional& x);

    void
    setGet_top_level_specification (::std::unique_ptr< Get_top_level_specificationType > p);

    // get_class_definition
    //
    typedef ::poosl::T_get_class_definition_request Get_class_definitionType;
    typedef ::xsd::cxx::tree::optional< Get_class_definitionType > Get_class_definitionOptional;
    typedef ::xsd::cxx::tree::traits< Get_class_definitionType, char > Get_class_definitionTraits;

    const Get_class_definitionOptional&
    getGet_class_definition () const;

    Get_class_definitionOptional&
    getGet_class_definition ();

    void
    setGet_class_definition (const Get_class_definitionType& x);

    void
    setGet_class_definition (const Get_class_definitionOptional& x);

    void
    setGet_class_definition (::std::unique_ptr< Get_class_definitionType > p);

    // get_object_handle
    //
    typedef ::poosl::T_get_object_handle_request Get_object_handleType;
    typedef ::xsd::cxx::tree::optional< Get_object_handleType > Get_object_handleOptional;
    typedef ::xsd::cxx::tree::traits< Get_object_handleType, char > Get_object_handleTraits;

    const Get_object_handleOptional&
    getGet_object_handle () const;

    Get_object_handleOptional&
    getGet_object_handle ();

    void
    setGet_object_handle (const Get_object_handleType& x);

    void
    setGet_object_handle (const Get_object_handleOptional& x);

    void
    setGet_object_handle (::std::unique_ptr< Get_object_handleType > p);

    // get_method_definition
    //
    typedef ::poosl::T_get_method_definition_request Get_method_definitionType;
    typedef ::xsd::cxx::tree::optional< Get_method_definitionType > Get_method_definitionOptional;
    typedef ::xsd::cxx::tree::traits< Get_method_definitionType, char > Get_method_definitionTraits;

    const Get_method_definitionOptional&
    getGet_method_definition () const;

    Get_method_definitionOptional&
    getGet_method_definition ();

    void
    setGet_method_definition (const Get_method_definitionType& x);

    void
    setGet_method_definition (const Get_method_definitionOptional& x);

    void
    setGet_method_definition (::std::unique_ptr< Get_method_definitionType > p);

    // rename_object_request
    //
    typedef ::poosl::T_rename_object_request Rename_object_requestType;
    typedef ::xsd::cxx::tree::optional< Rename_object_requestType > Rename_object_requestOptional;
    typedef ::xsd::cxx::tree::traits< Rename_object_requestType, char > Rename_object_requestTraits;

    const Rename_object_requestOptional&
    getRename_object_request () const;

    Rename_object_requestOptional&
    getRename_object_request ();

    void
    setRename_object_request (const Rename_object_requestType& x);

    void
    setRename_object_request (const Rename_object_requestOptional& x);

    void
    setRename_object_request (::std::unique_ptr< Rename_object_requestType > p);

    // insert_object_request
    //
    typedef ::poosl::T_insert_object_request Insert_object_requestType;
    typedef ::xsd::cxx::tree::optional< Insert_object_requestType > Insert_object_requestOptional;
    typedef ::xsd::cxx::tree::traits< Insert_object_requestType, char > Insert_object_requestTraits;

    const Insert_object_requestOptional&
    getInsert_object_request () const;

    Insert_object_requestOptional&
    getInsert_object_request ();

    void
    setInsert_object_request (const Insert_object_requestType& x);

    void
    setInsert_object_request (const Insert_object_requestOptional& x);

    void
    setInsert_object_request (::std::unique_ptr< Insert_object_requestType > p);

    // delete_object_request
    //
    typedef ::poosl::T_delete_object_request Delete_object_requestType;
    typedef ::xsd::cxx::tree::optional< Delete_object_requestType > Delete_object_requestOptional;
    typedef ::xsd::cxx::tree::traits< Delete_object_requestType, char > Delete_object_requestTraits;

    const Delete_object_requestOptional&
    getDelete_object_request () const;

    Delete_object_requestOptional&
    getDelete_object_request ();

    void
    setDelete_object_request (const Delete_object_requestType& x);

    void
    setDelete_object_request (const Delete_object_requestOptional& x);

    void
    setDelete_object_request (::std::unique_ptr< Delete_object_requestType > p);

    // instantiate
    //
    typedef ::poosl::T_instantiate_request InstantiateType;
    typedef ::xsd::cxx::tree::optional< InstantiateType > InstantiateOptional;
    typedef ::xsd::cxx::tree::traits< InstantiateType, char > InstantiateTraits;

    const InstantiateOptional&
    getInstantiate () const;

    InstantiateOptional&
    getInstantiate ();

    void
    setInstantiate (const InstantiateType& x);

    void
    setInstantiate (const InstantiateOptional& x);

    void
    setInstantiate (::std::unique_ptr< InstantiateType > p);

    // command
    //
    typedef ::poosl::T_command_request CommandType;
    typedef ::xsd::cxx::tree::optional< CommandType > CommandOptional;
    typedef ::xsd::cxx::tree::traits< CommandType, char > CommandTraits;

    const CommandOptional&
    getCommand () const;

    CommandOptional&
    getCommand ();

    void
    setCommand (const CommandType& x);

    void
    setCommand (const CommandOptional& x);

    void
    setCommand (::std::unique_ptr< CommandType > p);

    // execution_state
    //
    typedef ::poosl::T_execution_state_request Execution_stateType;
    typedef ::xsd::cxx::tree::optional< Execution_stateType > Execution_stateOptional;
    typedef ::xsd::cxx::tree::traits< Execution_stateType, char > Execution_stateTraits;

    const Execution_stateOptional&
    getExecution_state () const;

    Execution_stateOptional&
    getExecution_state ();

    void
    setExecution_state (const Execution_stateType& x);

    void
    setExecution_state (const Execution_stateOptional& x);

    void
    setExecution_state (::std::unique_ptr< Execution_stateType > p);

    // get_transitions
    //
    typedef ::poosl::T_get_transitions_request Get_transitionsType;
    typedef ::xsd::cxx::tree::optional< Get_transitionsType > Get_transitionsOptional;
    typedef ::xsd::cxx::tree::traits< Get_transitionsType, char > Get_transitionsTraits;

    const Get_transitionsOptional&
    getGet_transitions () const;

    Get_transitionsOptional&
    getGet_transitions ();

    void
    setGet_transitions (const Get_transitionsType& x);

    void
    setGet_transitions (const Get_transitionsOptional& x);

    void
    setGet_transitions (::std::unique_ptr< Get_transitionsType > p);

    // perform_transition
    //
    typedef ::poosl::T_perform_transition_request Perform_transitionType;
    typedef ::xsd::cxx::tree::optional< Perform_transitionType > Perform_transitionOptional;
    typedef ::xsd::cxx::tree::traits< Perform_transitionType, char > Perform_transitionTraits;

    const Perform_transitionOptional&
    getPerform_transition () const;

    Perform_transitionOptional&
    getPerform_transition ();

    void
    setPerform_transition (const Perform_transitionType& x);

    void
    setPerform_transition (const Perform_transitionOptional& x);

    void
    setPerform_transition (::std::unique_ptr< Perform_transitionType > p);

    // perform_process_step
    //
    typedef ::poosl::T_perform_process_step_request Perform_process_stepType;
    typedef ::xsd::cxx::tree::optional< Perform_process_stepType > Perform_process_stepOptional;
    typedef ::xsd::cxx::tree::traits< Perform_process_stepType, char > Perform_process_stepTraits;

    const Perform_process_stepOptional&
    getPerform_process_step () const;

    Perform_process_stepOptional&
    getPerform_process_step ();

    void
    setPerform_process_step (const Perform_process_stepType& x);

    void
    setPerform_process_step (const Perform_process_stepOptional& x);

    void
    setPerform_process_step (::std::unique_ptr< Perform_process_stepType > p);

    // inspect
    //
    typedef ::poosl::T_inspect_request InspectType;
    typedef ::xsd::cxx::tree::optional< InspectType > InspectOptional;
    typedef ::xsd::cxx::tree::traits< InspectType, char > InspectTraits;

    const InspectOptional&
    getInspect () const;

    InspectOptional&
    getInspect ();

    void
    setInspect (const InspectType& x);

    void
    setInspect (const InspectOptional& x);

    void
    setInspect (::std::unique_ptr< InspectType > p);

    // observe
    //
    typedef ::poosl::T_observe_request ObserveType;
    typedef ::xsd::cxx::tree::optional< ObserveType > ObserveOptional;
    typedef ::xsd::cxx::tree::traits< ObserveType, char > ObserveTraits;

    const ObserveOptional&
    getObserve () const;

    ObserveOptional&
    getObserve ();

    void
    setObserve (const ObserveType& x);

    void
    setObserve (const ObserveOptional& x);

    void
    setObserve (::std::unique_ptr< ObserveType > p);

    // create_breakpoint
    //
    typedef ::poosl::T_create_breakpoint_request Create_breakpointType;
    typedef ::xsd::cxx::tree::optional< Create_breakpointType > Create_breakpointOptional;
    typedef ::xsd::cxx::tree::traits< Create_breakpointType, char > Create_breakpointTraits;

    const Create_breakpointOptional&
    getCreate_breakpoint () const;

    Create_breakpointOptional&
    getCreate_breakpoint ();

    void
    setCreate_breakpoint (const Create_breakpointType& x);

    void
    setCreate_breakpoint (const Create_breakpointOptional& x);

    void
    setCreate_breakpoint (::std::unique_ptr< Create_breakpointType > p);

    // set_breakpoint_condition
    //
    typedef ::poosl::T_set_breakpoint_condition_request Set_breakpoint_conditionType;
    typedef ::xsd::cxx::tree::optional< Set_breakpoint_conditionType > Set_breakpoint_conditionOptional;
    typedef ::xsd::cxx::tree::traits< Set_breakpoint_conditionType, char > Set_breakpoint_conditionTraits;

    const Set_breakpoint_conditionOptional&
    getSet_breakpoint_condition () const;

    Set_breakpoint_conditionOptional&
    getSet_breakpoint_condition ();

    void
    setSet_breakpoint_condition (const Set_breakpoint_conditionType& x);

    void
    setSet_breakpoint_condition (const Set_breakpoint_conditionOptional& x);

    void
    setSet_breakpoint_condition (::std::unique_ptr< Set_breakpoint_conditionType > p);

    // enable_breakpoint
    //
    typedef ::poosl::T_enable_breakpoint_request Enable_breakpointType;
    typedef ::xsd::cxx::tree::optional< Enable_breakpointType > Enable_breakpointOptional;
    typedef ::xsd::cxx::tree::traits< Enable_breakpointType, char > Enable_breakpointTraits;

    const Enable_breakpointOptional&
    getEnable_breakpoint () const;

    Enable_breakpointOptional&
    getEnable_breakpoint ();

    void
    setEnable_breakpoint (const Enable_breakpointType& x);

    void
    setEnable_breakpoint (const Enable_breakpointOptional& x);

    void
    setEnable_breakpoint (::std::unique_ptr< Enable_breakpointType > p);

    // disable_breakpoint
    //
    typedef ::poosl::T_disable_breakpoint_request Disable_breakpointType;
    typedef ::xsd::cxx::tree::optional< Disable_breakpointType > Disable_breakpointOptional;
    typedef ::xsd::cxx::tree::traits< Disable_breakpointType, char > Disable_breakpointTraits;

    const Disable_breakpointOptional&
    getDisable_breakpoint () const;

    Disable_breakpointOptional&
    getDisable_breakpoint ();

    void
    setDisable_breakpoint (const Disable_breakpointType& x);

    void
    setDisable_breakpoint (const Disable_breakpointOptional& x);

    void
    setDisable_breakpoint (::std::unique_ptr< Disable_breakpointType > p);

    // delete_breakpoint
    //
    typedef ::poosl::T_delete_breakpoint_request Delete_breakpointType;
    typedef ::xsd::cxx::tree::optional< Delete_breakpointType > Delete_breakpointOptional;
    typedef ::xsd::cxx::tree::traits< Delete_breakpointType, char > Delete_breakpointTraits;

    const Delete_breakpointOptional&
    getDelete_breakpoint () const;

    Delete_breakpointOptional&
    getDelete_breakpoint ();

    void
    setDelete_breakpoint (const Delete_breakpointType& x);

    void
    setDelete_breakpoint (const Delete_breakpointOptional& x);

    void
    setDelete_breakpoint (::std::unique_ptr< Delete_breakpointType > p);

    // set_variable
    //
    typedef ::poosl::T_set_variable_request Set_variableType;
    typedef ::xsd::cxx::tree::optional< Set_variableType > Set_variableOptional;
    typedef ::xsd::cxx::tree::traits< Set_variableType, char > Set_variableTraits;

    const Set_variableOptional&
    getSet_variable () const;

    Set_variableOptional&
    getSet_variable ();

    void
    setSet_variable (const Set_variableType& x);

    void
    setSet_variable (const Set_variableOptional& x);

    void
    setSet_variable (::std::unique_ptr< Set_variableType > p);

    // eengine_event_setup
    //
    typedef ::poosl::T_eengine_event_setup_request Eengine_event_setupType;
    typedef ::xsd::cxx::tree::optional< Eengine_event_setupType > Eengine_event_setupOptional;
    typedef ::xsd::cxx::tree::traits< Eengine_event_setupType, char > Eengine_event_setupTraits;

    const Eengine_event_setupOptional&
    getEengine_event_setup () const;

    Eengine_event_setupOptional&
    getEengine_event_setup ();

    void
    setEengine_event_setup (const Eengine_event_setupType& x);

    void
    setEengine_event_setup (const Eengine_event_setupOptional& x);

    void
    setEengine_event_setup (::std::unique_ptr< Eengine_event_setupType > p);

    // id
    //
    typedef ::poosl::T_reqid IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    getId () const;

    IdType&
    getId ();

    void
    setId (const IdType& x);

    void
    setId (::std::unique_ptr< IdType > p);

    // Constructors.
    //
    Request ();

    Request (const IdType&);

    Request (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    Request (const Request& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    virtual Request*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Request&
    operator= (const Request& x);

    virtual 
    ~Request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LoadOptional load_;
    SaveOptional save_;
    SerializeOptional serialize_;
    DeserializeOptional deserialize_;
    CompileOptional compile_;
    List_filesOptional list_files_;
    Get_positionOptional get_position_;
    List_classesOptional list_classes_;
    Get_top_level_specificationOptional get_top_level_specification_;
    Get_class_definitionOptional get_class_definition_;
    Get_object_handleOptional get_object_handle_;
    Get_method_definitionOptional get_method_definition_;
    Rename_object_requestOptional rename_object_request_;
    Insert_object_requestOptional insert_object_request_;
    Delete_object_requestOptional delete_object_request_;
    InstantiateOptional instantiate_;
    CommandOptional command_;
    Execution_stateOptional execution_state_;
    Get_transitionsOptional get_transitions_;
    Perform_transitionOptional perform_transition_;
    Perform_process_stepOptional perform_process_step_;
    InspectOptional inspect_;
    ObserveOptional observe_;
    Create_breakpointOptional create_breakpoint_;
    Set_breakpoint_conditionOptional set_breakpoint_condition_;
    Enable_breakpointOptional enable_breakpoint_;
    Disable_breakpointOptional disable_breakpoint_;
    Delete_breakpointOptional delete_breakpoint_;
    Set_variableOptional set_variable_;
    Eengine_event_setupOptional eengine_event_setup_;
    ::xsd::cxx::tree::one< IdType > id_;
  };
}

#include <iosfwd>

namespace poosl
{
  ::std::ostream&
  operator<< (::std::ostream&, const T_load_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_save_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_serialize_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_deserialize_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_compile_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_list_classes_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_top_level_specification_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_class_definition_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_method_definition_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_object_handle_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_rename_object_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_insert_object_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_delete_object_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_instantiate_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_list_files_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_position_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_command_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_execution_state_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_get_transitions_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_perform_transition_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_perform_process_step_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_inspect_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_observe_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_eengine_event_setup_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_eengine_event_communication_credits_replenish&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_create_breakpoint_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_set_breakpoint_condition_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_enable_breakpoint_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_disable_breakpoint_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_delete_breakpoint_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const T_set_variable_request&);

  ::std::ostream&
  operator<< (::std::ostream&, const Request&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace poosl
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::poosl::Request >
  parseRequest (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace poosl
{
  // Serialize to std::ostream.
  //

  void
  serializeRequest (::std::ostream& os,
                    const ::poosl::Request& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  serializeRequest (::std::ostream& os,
                    const ::poosl::Request& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  serializeRequest (::std::ostream& os,
                    const ::poosl::Request& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  serializeRequest (::xercesc::XMLFormatTarget& ft,
                    const ::poosl::Request& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  serializeRequest (::xercesc::XMLFormatTarget& ft,
                    const ::poosl::Request& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  serializeRequest (::xercesc::XMLFormatTarget& ft,
                    const ::poosl::Request& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  serializeRequest (::xercesc::DOMDocument& d,
                    const ::poosl::Request& x,
                    ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeRequest (const ::poosl::Request& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const T_load_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_save_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_serialize_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_deserialize_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_compile_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_list_classes_request&);

  void
  operator<< (::xercesc::DOMAttr&, const T_list_classes_request&);

  void
  operator<< (::xml_schema::ListStream&,
              const T_list_classes_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_top_level_specification_request&);

  void
  operator<< (::xercesc::DOMAttr&, const T_get_top_level_specification_request&);

  void
  operator<< (::xml_schema::ListStream&,
              const T_get_top_level_specification_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_class_definition_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_method_definition_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_object_handle_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_rename_object_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_insert_object_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_delete_object_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_instantiate_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_list_files_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_position_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_command_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_execution_state_request&);

  void
  operator<< (::xercesc::DOMAttr&, const T_execution_state_request&);

  void
  operator<< (::xml_schema::ListStream&,
              const T_execution_state_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_get_transitions_request&);

  void
  operator<< (::xercesc::DOMAttr&, const T_get_transitions_request&);

  void
  operator<< (::xml_schema::ListStream&,
              const T_get_transitions_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_perform_transition_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_perform_process_step_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_inspect_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_observe_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_eengine_event_setup_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_eengine_event_communication_credits_replenish&);

  void
  operator<< (::xercesc::DOMElement&, const T_create_breakpoint_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_set_breakpoint_condition_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_enable_breakpoint_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_disable_breakpoint_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_delete_breakpoint_request&);

  void
  operator<< (::xercesc::DOMElement&, const T_set_variable_request&);

  void
  operator<< (::xercesc::DOMElement&, const Request&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ROTALUMISREQUEST_HXX
